@model Previgesst.ViewModels.EmployeRegistreViewModel
@using Previgesst.Ressources.Previcad
@using Previgesst.Ressources.Cadenassage
@using Previgesst.Ressources

@{
    string nomUtilisateur = "";

    if (Request.IsAuthenticated)
    {
        Previgesst.Sessions.sessionInfo session = (Previgesst.Sessions.sessionInfo)Session["utilisateur"];
        nomUtilisateur = session?.Nom;
    }

    if (HttpContext.Current.Session["EmployeCadenassage"] != null)
    {
        EmployeRegistreViewModel employe = (EmployeRegistreViewModel)HttpContext.Current.Session["EmployeCadenassage"];
        nomUtilisateur = employe.Nom;
    }
}


<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3 class="m-0">@PrevIndexRES.EnCours</h3>
    </div>
    <div class="page-table-meta">
        <button id="btnExportEnCours" class="btn-table btn-excel float-end k-button" type="button">@PrevFicheRES.ExportToExcel</button>
    </div>
</div>



<div id="Employes" class="tab-pane">

    @Html.AntiForgeryToken()

    @(Html.Kendo().Grid<LigneRegistreViewModel>()
                    .Name("listEnCours")
                    .Columns(columns =>
                    {

                        columns.Bound(e => e.NoFicheCadenassage)
                                .Title(PrevFicheRES.NoFiche)
                                .Filterable(f => f.Extra(false)
                                .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                        .Contains(GridRES.Contains)
                                        .StartsWith(GridRES.StartsWith)
                                        .IsEqualTo(GridRES.Egale)
                                        .IsNotEqualTo(GridRES.NotEquals)
                        ))).Width("95px");


                        columns.Bound(e => e.NomDepartement)
                                .Title(PrevFicheRES.Departement)
                                .Filterable(f => f.Extra(false)
                                .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                        .Contains(GridRES.Contains)
                                        .StartsWith(GridRES.StartsWith)
                                        .IsEqualTo(GridRES.Egale)
                                        .IsNotEqualTo(GridRES.NotEquals)
                        ))).Width("180px");


                        columns.Bound(e => e.NomEquipement)
                                .Title(PrevFicheRES.Equipement)
                                .Filterable(f => f.Extra(false)
                                .Operators(operators => operators
                                        .ForString(str => str.Clear()
                                        .Contains(GridRES.Contains)
                                        .StartsWith(GridRES.StartsWith)
                                        .IsEqualTo(GridRES.Egale)
                                        .IsNotEqualTo(GridRES.NotEquals)
                        ))).Width("120px");


                        columns.Bound(e => e.EmployeRegistreId).Hidden(true);
                        columns.Bound(e => e.FicheCadenassageId).Hidden(true);
                        columns.Bound(e => e.PendingSteps).HtmlAttributes(new { @class = "PendingSteps" }).Hidden(true); //.ClientTemplate("<span class='PendingSteps'>#=PendingSteps#</span>");

                        columns.Bound(e => e.DateDebut).Format("{0:yyyy-MM-dd HH:mm}").Filterable(f => f.Extra(false)).Title(PrevFicheRES.Debut).Width("110px");

                        columns.Bound(e => e.DateFin).Format("{0:yyyy-MM-dd HH:mm}").Filterable(f => f.Extra(false)).Title(PrevFicheRES.Fin).Width("110px");

                        columns.Bound(e => e.FinPrevue).Format("{0:yyyy-MM-dd HH:mm}").Filterable(f => f.Extra(false)).Title(PrevFicheRES.FinPrevueEmploye).Width("110px");
                        columns.Bound(e => e.Note);
                        columns.Bound(e => e.BonDeTravail).Title(PrevFicheRES.BonDeTravail).Width("120px");



                        columns.Bound(e => e.LigneRegistreId)
                               .ClientTemplate("<center><a href='../../Registre/GetEtiquette/#= LigneRegistreId#' class='btn etiquetteButton' style='text-align:center' title=" + PrevFicheRES.Etiquette + "><img src='/content/v2/images/download-icon.svg' alt='download'/></a></center>")
                               .Title(GridRES.Etiquette).Filterable(false).Sortable(false).Width("100px");

                        columns.Command(e => e.Custom("steps").Click("showInsDetails").HtmlAttributes(new { @data_viewonly = "false", @class = "btn-material mx-1 text-nowrap" }).Text(@PrevFicheRES.Steps)).Width("130px");

                        columns.Command(e => e.Edit().Text(PrevFicheRES.Modifier).HtmlAttributes(new { @class = "btn-table btn-edit text-nowrap" })).Width("140px");
                    })
                    .DataSource(ds => ds
                    .Ajax()
                    .PageSize(10)

                    .Model(m =>
                    {
                        m.Id(e => e.LigneRegistreId);

                    }))

                    .Sortable(s => s.AllowUnsort(false))
                    .Scrollable(e => e.Enabled(true))
                    .ToolBar(tools => tools.Excel().HtmlAttributes(new { @class = "d-none" }))
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneRegistre").Window(w => w.Title(PrevFicheRES.Cadenasser).Width(600))

                    .DisplayDeleteConfirmation(false)
                    )
                    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                    .Filterable()
                    .DataSource(ds => ds
                        .Ajax().Events(e=>e.RequestEnd("doRefresh"))
                        .Filter(f =>
                        {
                            f.Add(b => b.Termine).IsEqualTo(false);
                        })
                        .Sort(x => x.Add(c => c.DateDebut).Descending())

                        .PageSize(20)


                        .Read(r => r.Action("ReadLignesRegistreCadenassageUnEmploye", "Registre", new { client = Model.ClientId }))
                        .Create(c => c.Action("SaveLigneRegistreUnEmploye", "Registre", new { client = Model.ClientId }))
                        .Update(u => u.Action("SaveLigneRegistreUnEmploye", "Registre", new { client = Model.ClientId }))
                        .Destroy(d => d.Action("DeleteLigneRegistreUnEmploye", "Registre", new { client = Model.ClientId }))
                    )
                    .Events(e => e.DataBound("dataBoundEnCours"))
                    .Events(e => e.Edit("onEditEnCours"))

        )


</div>


<div id="wnd" style="display: none;">
    <div class="armchair">
        <div id="wrapped-grid"></div>
        <div>
            <label>@PrevFicheRES.Notes</label>
            <textarea id="StepComments" name="StepComments" class="form-control" rows="5" style="width:97%"></textarea>
        </div>
    </div>
    <div class="window-footer">
        <input type="button" class="btn btn-mettre m-1 mt-3" id="btnSaveInstructionStatus" value="@CadEditRES.Enregistrer" />
    </div>
</div>


<div id="wndEmail" style="display: none;">
    <div style="width:97%">
        <div>
            <label class="form-label">@PrevFicheRES.WarningToEmails</label>
            <input type="text" id="WarningToEmails" name="WarningToEmails" class="form-control" />
        </div>
        <div>
            <label class="form-label">@PrevFicheRES.WarningBodyLabel</label>
            <textarea class="form-control h-300" id="WarningEmailText" name="WarningEmailText" rows="15">
            </textarea>
        </div>

        <div class="d-block">
            <br />
            <input type="button" class="btn btn-info pull-right" id="btnSendInsWarningEmail" value="@PrevFicheRES.SendEmail" />
        </div>
    </div>
</div>



<script>
    function dataBoundEnCours(e) {
        //var selecteurGrid = "#listEnCours";
        ////var grid = $(selecteurGrid).data("kendoGrid");


        //$(selecteurGrid + " .k-grid-edit").find("span").remove();
        //var classe = $(selecteurGrid + " .k-grid-edit").attr("class");
        //classe = "btn btn-success " + classe;

        //$(selecteurGrid + " .k-grid-edit").removeAttr("class").addClass(classe).removeClass("k-button").removeClass("k-button-icontext");
        //$(selecteurGrid + " .k-grid-steps").removeAttr("class").addClass("k-grid-steps");
    }

    function onEditEnCours(e) {
        e.container.find(".k-grid-cancel").bind("click", function () {
            $("#listEnCours").data("kendoGrid").dataSource.read();
            $("#listTermines").data("kendoGrid").dataSource.read();
        })
        e.container.data().kendoWindow.bind("deactivate", deactivateEdit)
    }

    function deactivateEdit() {
        //$("#listEnCours .k-grid-steps").each(function () {
        //    $(this).removeAttr("class").addClass("k-grid-steps");
        //});

        //$("#listEnCours .k-grid-edit").each(function () {
        //    $(this).removeAttr("class").addClass("btn btn-success k-grid-edit");
        //});
    }

    function doRefresh(e) {
        if (e.type == "update") {
            $("#listEnCours").data("kendoGrid").dataSource.read();
            $("#listTermines").data("kendoGrid").dataSource.read();
        }
    }

    //// Add img title
    //setTimeout(function () {
    //    jQuery('.k-grid-edit').each(function () {
    //        jQuery(this).attr('title', 'Effectuez');
    //    });
    //}, 3000);

    function showInsDetails(e) {
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var url = "@Url.Action("Instruction", "Registre")?ficheId=" + dataItem.FicheCadenassageId + '&ligneRegistreId=' + dataItem.LigneRegistreId;

        var viewonly =  $(e.currentTarget).data("viewonly");

        $('.window-footer').show();
        $('.armchair').removeClass('fullheight');
        $('#StepComments').removeAttr('readonly');

        if (viewonly == "yes") {
            $('.window-footer').hide();
            $('.armchair').addClass('fullheight');
            $('#StepComments').attr('readonly', 'readonly');
        }

        /*$("#wrapped-grid").empty();*/

        $("#wrapped-grid").kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: url,
                        dataType: "json"
                    }
                }
            },

            /*height: "465px",*/
            scrollable: false,
            sortable: false,
            resizable: false,
            columns: [
                { field: "PKType", hidden: true },
                { field: "PKId", hidden: true },
                { field: "FicheCadenassageId", hidden: true },
                { field: "LigneRegistreId", hidden: true },
                { field: "NoLigne", width: "60px", title: "#", template: "# if(NoLigne > 0) {# #=NoLigne# #}#", attributes: { "class": "td-round-left-border" } },
                {
                    field: "TexteInstruction", title: "@CadLigneCadRES.Instruction",
                    template: "<b # if(NoLigne == 0) {# style='color:red;' #}#> #= TexteInstruction # </b><br> #= TexteSupplementaireInstruction == null ? '' : TexteSupplementaireInstruction #"
                },
                {
                    field: "TexteSupplementaireDispositif", title: "@CadLigneCadRES.Dispositif",
                    template: "<b>#= TexteDispositif # </b><br> #= TexteSupplementaireDispositif == null ? '' : TexteSupplementaireDispositif #"
                },
                { field: "TexteAccessoire", width: "100px", title: "@CadLigneCadRES.Accessoire" },
                { field: "Thumbnail", title: "@CadLigneCadRES.Image", template: "# if(PhotoFicheCadenassageId != null) {# <img class='img-ins' src='#=Thumbnail#'/> #}#" },
                { field: "StepStatus", width: "150px", title: "@CadLigneCadRES.StepStatus", template: StatusTemplateFunction },
            ],

            dataBound: function (e) {
                var grid = e.sender;
                var items = e.sender.items();

                items.each(function (e) {
                    var dataItem = grid.dataItem(this);
                    var ddt = $(this).find('.statusdropDownTemplate');
                    //console.log('ddt dateItem', dataItem);

                    $(ddt).kendoDropDownList({
                        value: dataItem.StepStatus,
                        dataSource: ddlDataSource,
                        dataTextField: "displayValue",
                        dataValueField: "StepStatus",
                        change: onDDLStatusChange
                    });

                    if (viewonly == "yes") {
                        if (ddt.length > 0) {
                            $(ddt).data("kendoDropDownList").enable(false);
                        }
                    }
                });
            }
        });

        GetComments(dataItem.FicheCadenassageId, dataItem.LigneRegistreId);

        var wnd = $("#wnd").kendoWindow({
            height: 500,
            width: 975,
            visible: false,
            modal: true
        }).data("kendoWindow");

        wnd.title("@PrevFicheRES.OptionWindowTitle")
            .center()
            .open();
    }

    var ddlDataSource = [
        { StepStatus: 1, displayValue: "@Html.Raw(PrevFicheRES.Option1)" },
        { StepStatus: 2, displayValue: "@Html.Raw(PrevFicheRES.Option2)" },
        { StepStatus: 3, displayValue: "@Html.Raw(PrevFicheRES.Option3)" },
        { StepStatus: 4, displayValue: "@Html.Raw(PrevFicheRES.Option4)" }
    ];

    function onDDLStatusChange(e) {
        var element = e.sender.element;
        var row = element.closest("tr");
        var grid = $("#wrapped-grid").data("kendoGrid");
        var dataItem = grid.dataItem(row);

        /*dataItem.set("value", e.sender.value());*/
        dataItem.set("StepStatus", e.sender.value());
    };

    function StatusTemplateFunction(dataItem) {
        if (dataItem.PKId > 0) {
            return '<input class="statusdropDownTemplate"/>'
        }
        else {
            return '';
        }
    }

    $(document).on('click', '#btnSaveInstructionStatus', function () {

        var entityGrid = $("#wrapped-grid").data("kendoGrid");
        var data = entityGrid.dataSource.data();
        var totalNumber = data.length;
        var allData = [];
        var allWarnings1 = [];
        var allWarnings2 = [];

     
        for (var i = 0; i < totalNumber; i++) {
            var currentDataItem = data[i];

            allData.push({
                PKId: 0,
                InstructionId: currentDataItem.PKId,
                InstructionType: currentDataItem.PKType,
                StepStatus: currentDataItem.StepStatus,
                FicheCadenassageId: currentDataItem.FicheCadenassageId,
                LigneRegistreId: currentDataItem.LigneRegistreId
            });

            // Empty and Non-conforme
            if (currentDataItem.StepStatus == "1" || currentDataItem.StepStatus == "3") {
                if (currentDataItem.PKType == "Decadenassage") {
                    allWarnings1.push(currentDataItem.NoLigne + '. ' + currentDataItem.TexteInstruction);
                }
                else {
                    allWarnings2.push(currentDataItem.NoLigne + '. ' + currentDataItem.TexteInstruction);
                }
            }
        }

        var insNotes = $('#StepComments').val();

        $.ajax({
            url: "@Url.Action("SaveInstructions", "Registre")",
            type: 'POST',
            data: { model: allData, note: insNotes },
            dataType: 'json',
            cache: false,
            success: function (result) {
                if (result.isSuccess == true) {
                    $("#listEnCours").data("kendoGrid").dataSource.read();
                    $("#listTermines").data("kendoGrid").dataSource.read();

                    $("#wnd").data("kendoWindow").close();
                    if (allWarnings1.length > 0 || allWarnings2.length > 0) {
                        OpenWarningEmail(allData[1].FicheCadenassageId, allWarnings1, allWarnings2);
                    }
                }
            },
            error: function (req, status, errorObj) {
            }
        });
    });

    function OpenWarningEmail(ficheID, allWarnings1, allWarnings2) {

        var warSubject = '@Html.Raw(PrevFicheRES.WarningEmailSubject)' + "\n";
        var warDescr = '@Html.Raw(PrevFicheRES.WarningDescr)' + "\n";
        var warFildId = '@Html.Raw(PrevFicheRES.WarningFileId)' + ' ' + ficheID ;
        var warUser = '@Html.Raw(PrevFicheRES.WarningUser)' + ' @nomUtilisateur';
        var warTexts = '@Html.Raw(PrevFicheRES.WarningTexts)';

        var switchOn = "@Html.Raw(PrevFicheRES.SwitchOn)";
        var switchOff = "@Html.Raw(PrevFicheRES.SwitchOff)";


        var allWarningText = '';

        if (allWarnings2.length > 0) {
            allWarningText += '\n' + switchOff + '\n';
            allWarningText += allWarnings2.join("\n");
        }

        allWarningText += '\n';


        if (allWarnings1.length > 0) {
            allWarningText += '\n' + switchOn + '\n';
            allWarningText += allWarnings1.join("\n");
        }


        

        console.log(allWarningText);

        var insNotes = $('#StepComments').val();
        if (insNotes != '') {

            insNotes = '@Html.Raw(PrevFicheRES.Notes)' +'\n' +insNotes;
        }

        $('#WarningEmailText').html(warSubject + "\n" + warDescr + "\n" + warFildId + "\n" + warUser + "\n" + warTexts + "\n" + allWarningText + '\n\n' + insNotes);

        $.ajax({
            url: "@Url.Action("GetEmailAddressForWarning", "Registre", new { @client = Model.ClientId })",
            type: 'POST',
            //data: { model: allData },
            dataType: 'json',
            cache: false,
            success: function (result) {
                if (result.isSuccess == true) {

                    var allEmails = [];

                    $(result.Users).each(function (i, item) {
                        allEmails.push(item.Courriel);
                    });

                    $('#WarningToEmails').val(allEmails.join(';'));

                    var wndEmail = $("#wndEmail").kendoWindow({
                        height: 500,
                        width: 950,
                        visible: false,
                        modal: true
                    }).data("kendoWindow");

                    wndEmail.title("@PrevFicheRES.WarningEmailSubject")
                        .center()
                        .open();
                }
            },
            error: function (req, status, errorObj) {
            }
        });


    }


    $(document).on('click', '#btnSendInsWarningEmail', function () {

        var warningEmails = $("#WarningToEmails").val();

        if (warningEmails == '') {
            //alert('Missing Emails');
            ShowNotification("Required", "Email Address are missing.", "errorTemplate");
            return;
        }

        var warningBody = $("#WarningEmailText").val();


        var model = { client: @Model.ClientId, subject: "@PrevFicheRES.WarningEmailSubject", emails: warningEmails, body: warningBody };

        $.ajax({
            url: "@Url.Action("SendWarningEmails", "Registre")",
            type: 'POST',
            data: model,
            dataType: 'json',
            cache: false,
            success: function (result) {
                if (result.isSuccess == true) {
                    //$('#wrapped-grid').data('kendoGrid').dataSource.read();

                    $("#wndEmail").data("kendoWindow").close();
                }
                else {
                    ShowNotification("Error", result.ErrorMessage, "errorTemplate");
                }
            },
            error: function (req, status, errorObj) {
            }
        });
    });

    function GetComments(ficheId, ligneRegistreId) {
        $('#StepComments').val('');

        $.ajax({
            url: "@Url.Action("GetInstructionNote", "Registre")?ficheId=" + ficheId + '&ligneRegistreId=' + ligneRegistreId,
            type: 'POST',
            //data: { model: allData, note: insNotes },
            dataType: 'json',
            cache: false,
            success: function (result) {
                if (result.isSuccess == true) {
                    if (result.Note != null) {
                        $('#StepComments').val(result.Note.Notes);
                    }
                }
            },
            error: function (req, status, errorObj) {
            }
        });
    }

    $('#btnExportEnCours').off().on('click', function () {
        $("#listEnCours").find(".k-grid-excel.d-none").click();
    });

</script>


