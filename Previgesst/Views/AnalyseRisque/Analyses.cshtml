@model Previgesst.ViewModels.EditCadenassageViewModel
@using Previgesst.Ressources
@using Previgesst.Ressources.Analyse

<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3>@AREditClientRES.Analyses</h3>
    </div>
    <div class="page-table-meta">
        @if (Model.estUpdate)
        {
            <div class="add-icon">
                <a href='~/@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName/AnalyseRisque/Create/@Model.ClientId'>
                    <img src="/content/v2/images/plus-icon.svg" />
                </a>
            </div>
        }

        &nbsp;
        <a target='_blank' href='~/AnalyseRisque/getXLAnalyseClient/@Model.ClientId' class="btn btn-primary">@AREditClientRES.DocumentComplet</a>
        
        &nbsp;
        <a target='_blank' href='~/AnalyseRisque/getXLAnalyseClientEN/@Model.ClientId' class="btn btn-primary">@AREditClientRES.DocumentCompletEN</a>

    </div>
</div>


@Html.AntiForgeryToken()

@(Html.Kendo().Grid<AnalyseRisqueListViewModel>()
        .Name("list-analyse")
        .Columns(columns =>
        {
            columns.Bound(c => c.AnalyseRisqueId).Hidden();

            columns.Bound(c => c.NoRef)
                    .Filterable(f => f.Extra(false).Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains(GridRES.Contains)
                    .StartsWith(GridRES.StartsWith)
                    .IsEqualTo(GridRES.Egale)
                    .IsNotEqualTo(GridRES.NotEquals)
                )))
                .Width("160px")
                .HtmlAttributes(new { @class = "td-round-left-border" })
                .Title(AREditClientRES.NumeroEquipement);

            columns.Bound(c => c.Equipement)
                .Filterable(f => f.Extra(false).Operators(operators => operators
                .ForString(str => str.Clear()
                .Contains(GridRES.Contains)
                .StartsWith(GridRES.StartsWith)
                .IsEqualTo(GridRES.Egale)
                .IsNotEqualTo(GridRES.NotEquals)
                )))
                ;


            // TODO MAX : if DateMAJ NULL, display none
            columns.Bound(c => c.DateMAJ)
                .Filterable(f => f.Extra(false))
                .Format("{0:" + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + "}")
                .Width("150px")
                .Title(AREditClientRES.MiseAJour);

            columns.Bound(c => c.AfficherChezClient)
                //.ClientTemplate("<center><input disabled type='checkbox' #= AfficherChezClient ? checked='checked' :'' # /></center>")
                .ClientTemplate("<center><div class='squaredThree'><input type='checkbox' disabled value='None' id='squaredone' name='check' #=AfficherChezClient ? checked='checked' :'' # /><label for='squaredone'><span> </span></label></div></center>")
                .Title(AREditClientRES.AfficherChezLeClient).Sortable(false)
                .HeaderHtmlAttributes(new { @class = "text-no-wrap"})
                .Width("80px");

            //columns.Bound(e => e.Id).ClientTemplate("<a  href='Edit?ID=#= " + nameof(AnalyseRisqueListViewModel.Id) + " #' class='btn btn-primary' style='float:right'>Modifier</a>").Title("").Filterable(false).Sortable(false);
            columns.Bound(e => e.Id).ClientTemplate("<a target='_blank' href='" + Url.Action("getXLAnalyse", "AnalyseRisque") + "/#= " + nameof(AnalyseRisqueListViewModel.Id) + " #'><img src='/content/v2/images/fr-icon.svg' alt='FR icon'/></a>")
            .Title("").Filterable(false).Sortable(false)
            .Width("60px").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });

            columns.Bound(e => e.Id).ClientTemplate("<a target='_blank' href='" + Url.Action("getXLAnalyseEN", "AnalyseRisque") + "/#= " + nameof(AnalyseRisqueListViewModel.Id) + " #'><img src='/content/v2/images/en-icon.svg' alt='FR icon'/></a>")
            .Title("").Filterable(false).Sortable(false)
            .Width("60px").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });

            columns.Bound(e => e.Id).ClientTemplate("<a  href='" + Url.Action("Edit", "AnalyseRisque") + "/#= " + nameof(AnalyseRisqueListViewModel.Id) + " #' class='k-button btn btn-editicon btn-edit-previ'></a>")
            .Title(AREditClientRES.Vide).Filterable(false).Sortable(false)
            .Width("60px").HtmlAttributes(new { @class = "text-center" }).HeaderHtmlAttributes(new { @class = "text-center" });


            columns.Command(c =>
            {
                c.Custom(AREditClientRES.Vide)
                        .Click("ConfirmDeleteRowAnalyse")
                        .HtmlAttributes(new { @class = "k-grid-effacer btn-del" });
            })
            .Width("60px");
        })
        .Sortable(s => s.AllowUnsort(false))
        .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
        .Filterable()
        .Editable(e => e.DisplayDeleteConfirmation(false))
        .DataSource(ds => ds
            .Ajax()
            .PageSize(20)
            .Model(m =>
            {
                m.Id(e => e.AnalyseRisqueId);
            })
            .Read(r => r.Action("ReadListAnalyseRisque", "AnalyseRisque", new { client = Model.ClientId }))
            .Destroy(u => u.Action("DeleteAnalyse", "AnalyseRisque"))
        )
        .Events(e => e.DataBound("ListeDataBoundAnalyse"))
        //.Scrollable(s => s.Enabled(true).Height("auto"))
)


<script>

    function ConfirmDeleteRowAnalyse(e) {
        //debugger;
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.NoRef, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }

    function ListeDataBoundAnalyse(e) {
        var selecteurGrid = "#list-analyse";
        var grid = $(selecteurGrid).data("kendoGrid");

        ////Selects all delete buttons
        //$(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
        //    var currentDataItem = grid.dataItem($(this).closest("tr"));

        //    //Check in the current dataItem if the row is deletable
        //    if (!currentDataItem.Suppressible) {
        //        $(this).remove();
        //    }
        //})


        //$(selecteurGrid + " tbody tr .btn-edit-previ").each(function () {
        //    var currentDataItem = grid.dataItem($(this).closest("tr"));

        //    //Check in the current dataItem if the row is editable
        //    if (!currentDataItem.Editable) {
        //        $(this).remove();
        //    }
        //})


        // on cache la colonne AfficherChezClient

        var estClient = '@Model.estClient';
        if (estClient == 'True') {
            var grid = $("#list-analyse").data("kendoGrid");
            grid.hideColumn("AfficherChezClient");
            //grid.hideColumn("")
        }
    }


</script>

