@model Previgesst.ViewModels.EditCadenassageViewModel
@using Previgesst.Ressources
@using Previgesst.Ressources.Analyse

<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3>@AREditClientRES.Documents</h3>
    </div>
    <div class="page-table-meta">
        @if (Model.estUpdate)
        {
            <div class="add-icon">
                <a id="btnAddDocAnalyses">
                    <img src="/content/v2/images/plus-icon.svg" />
                </a>
            </div>
        }
    </div>
</div>



@Html.AntiForgeryToken()

@(Html.Kendo().Grid<DocumentClientViewModel>()
        .Name("liste-doc")
        .Columns(columns =>
        {

            columns.Bound(e => e.DocumentClientId).Hidden();
            columns.Bound(c => c.ApplicationPreviId).Hidden();
            columns.Bound(c => c.ClientId).Hidden();
            columns.Bound(c => c.Titre).Filterable(f => f.Extra(false).Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains(GridRES.Contains)
                    .StartsWith(GridRES.StartsWith)
                    .IsEqualTo(GridRES.Egale)
                    .IsNotEqualTo(GridRES.NotEquals)
                    ))).Hidden();


            columns.Bound(c => c.Titre)
                    .Filterable(f => f.Extra(false).Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains(GridRES.Contains)
                    .StartsWith(GridRES.StartsWith)
                    .IsEqualTo(GridRES.Egale)
                    .IsNotEqualTo(GridRES.NotEquals)
                    )))
                    .HtmlAttributes(new { @class = "td-round-left-border" })
                    .Width("170px");

            columns.Bound(c => c.FileName).EditorTemplateName("UploadEditor").Encoded(false).Sortable(false).Filterable(false);

            columns.Bound(e => e.Bidon).EditorTemplateName("Vide").ClientTemplate("<a href='#=BasePath#' class='downloadButton'><img src='/content/v2/images/download-icon.svg'></a>")
                   .Title("").Filterable(false).Sortable(false).Width("60px");


            columns.Command(c =>
            {

                c.Edit().HtmlAttributes(new { @class = "btn-table btn-edit" });
                c.Custom(" ")
                        .Click("ConfirmDeleteRow")
                        .HtmlAttributes(new { @class = "k-grid-effacer btn-del" });

            }).Hidden(!Model.estUpdate)
            .Width("200px");
        })

        .Sortable(s => s.AllowUnsort(false))
        .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
        .Filterable()
        .DataSource(ds => ds
            .Ajax()
            .PageSize(20)
            .Model(m =>
            {
                m.Id(e => e.DocumentClientId);
                m.Field(e => e.Bidon).Editable(true);

            })
        .Read(r => r.Action("ReadListDocClientAnalyse", "Documents", new { id = Model.ClientId }))
        .Create(c => c.Action("SaveDocClientAnalyse", "Documents", new { id = Model.ClientId }))
        .Update(u => u.Action("SaveDocClientAnalyse", "Documents", new { id = Model.ClientId }))
        .Destroy(u => u.Action("DeleteDocumentClient", "Documents"))
        .Events(e => e.Error("docListeErreur"))
    )

    .Events(e => e.DataBound("docListeDataBound"))
    .Editable(e => e.DisplayDeleteConfirmation(false))
    .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneDocumentClientEditor").Window(w => w.Title(AREditClientRES.Edition).Width(600).Name("editWindow")))
    .NoRecords(AREditClientRES.AucunDocument)
    .ToolBar(t =>
    {
        t.Create().HtmlAttributes(new { @class = "d-none btn-analyse" });
    })
)


<script>


    $("#DocCliAnalyse").click(function () {
        @*$("a.k-grid-add").removeClass("k-button  k-button-icontext");
        $("a.k-grid-add").addClass("btn btn-success btn-analyse");
        $("span.k-add").removeClass("k-icon");


        $("a.btn-analyse").text("@AREditClientRES.Ajouter");

        var estUpdate = '@Model.estUpdate';
        if (estUpdate == 'False') {
            $("a.btn-analyse").hide();
        }*@
    });



    function ConfirmDeleteRow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.FileName, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }


    function docListeErreur(args) {
        //debugger;
        var selecteurGrid = "#liste-doc";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("@AREditClientRES.Erreur",
                        errorList,
                        "errorListTemplate");
                });
            });
        }



    }

    function docListeDataBound(e) { }

    function fileSelect(e) {

        var extension = e.files[0].extension.toLowerCase().trim();
        var size = e.files[0].size;
        var estClient = '@Model.estClient';


        if (extension != ".xlsx" && extension != ".docx" && extension != ".pdf" && extension != ".xls" && extension != ".doc") {
            e.preventDefault();

            ShowNotification("@AREditClientRES.Attention", "@AREditClientRES.AttentionType", "errorTemplate")
        }
        else {
            if (estClient == 'True' && size > 3 * 1024 * 1024) {
                e.preventDefault();

                ShowNotification("@AREditClientRES.Attention", "@AREditClientRES.TailleMaximale", "errorTemplate")
            }
        }
    }

    function fileSuccess(e) {
        var z = $('.k-popup-edit-form');
        var gview = $("#liste-doc").data("kendoGrid");
        var row = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");
        var item = gview.dataItem(row);

        item.set('Titre', e.response.Titre);
        item.set('DocumentClientId', e.response.DocumentClientId);
        item.set('FileName', e.response.NomFichier);
        item.set('BasePath', e.response.BasePath);
    }


    function fileUpload(e) {
        var z = $('.k-popup-edit-form');
        var gview = $("#liste-doc").data("kendoGrid");
        var item = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");
        var selectedItem = gview.dataItem(item);
        selectedItem.dirty = true;
        e.data = { DocumentClientId: selectedItem.DocumentClientId, ClientId:@Model.ClientId, Titre: selectedItem.Titre };
    }


    $('#btnAddDocAnalyses').click(function () {
        $("#liste-doc").find("a.d-none.k-grid-add").click();
    });

</script>