@using Previgesst.ViewModels
@using Previgesst.Ressources.Analyse
@using Previgesst.Ressources

@model AnalyseRisqueEditViewModel
@{
    ViewBag.Title = "Analyses";
    Layout = "~/Views/Shared/_Layout_v2.cshtml";
    if (ViewData["Layout"] != null)
    {
        Layout = (string)ViewData["Layout"];
    }

    string selectedLang = System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName.ToLower();
}

@section styles{
    <link href="~/Content/kendo/2016.2.714/kendo.common-bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/v2/grid-override.css" rel="stylesheet" />
    <link href="~/Content/v2/buttons.css" rel="stylesheet" />
}


@section sidebar{

    <ul class="nav flex-column sidebar-nav" role="tablist">
        <li class="nav-item text-center mt-2">
            <a class="nav-link home-navlink" role="tab" href='@if (this.Layout.EndsWith("_Layout_v2.cshtml")) { @Url.Action("Index", "AdminPrevi") } else { @Url.Action("Index", "MesApplications") } '>
                <img src="/content/v2/images/icon-home.png" /><p class="nav-link-text">@LayoutRES.Accueil</p>
            </a>
        </li>

        <li class="nav-item text-center active">
            <a class="nav-link home-navlink" role="tab" data-toggle="tab" data-bs-toggle="tab" href="#Edition">
                <img src="/content/v2/images/Procédures.svg">
                <p class="nav-link-text">@ARCreateRES.EditionAnalyse</p>
            </a>
        </li>
        <li class="nav nav-item text-center">
            <a class="nav-link home-navlink" role="tab" data-toggle="tab" data-bs-toggle="tab" href="#Lignes">
                <img src="/content/v2/images/Procédures.svg"><p class="nav-link-text">@ARCreateRES.Lignes</p>
            </a>
        </li>

    </ul>
}

<main class="main-container-wrapper page-container">
    <div class="breadcrumbs-nav-wrapper">
        <ul class="breadcrumbs">
            <li><a href='@if (this.Layout.EndsWith("_Layout_v2.cshtml")) { @Url.Action("Index", "AdminPrevi") } else { @Url.Action("Index", "MesApplications") } '>@LayoutRES.Accueil</a></li>
            <li><a href="~/@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName/AnalyseRisque/EditClient/@Model.ClientId">@ARCreateRES.Retour</a></li>
            <li class="active" aria-current="page">@ARCreateRES.EditionAnalyse</li>
        </ul>
    </div>

    <div class="main-page-content">
        <div class="tab-content">

            <div id="Edition" class="tab-pane active">

                <div class="table-top-header">
                    <div class="page-title d-flex justify-content-center align-items-center">
                        <h3 class="m-0">@ARCreateRES.EditionAnalyseRisque</h3>
                    </div>
                    <div class="page-table-meta">
                        @if (selectedLang == "en")
                        {
                            <a class="me-4" href='~/AnalyseRisque/getXLAnalyseEN?id=@Model.Id'><img src='/content/v2/images/en-icon.svg' alt='EN' /></a>
                        }
                        else
                        {
                            <a class="me-4" href='~/AnalyseRisque/getXLAnalyse?id=@Model.Id'><img src='/content/v2/images/fr-icon.svg' alt='FR' /></a>
                        }
                    </div>
                </div>



                @using (Html.BeginForm("Edit", "AnalyseRisque", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken();
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" });

                    @Html.HiddenFor(m => m.Id)
                    @Html.HiddenFor(m => m.NomClient)
                    @Html.HiddenFor(m => m.Createur)
                    @Html.HiddenFor(m => m.DateCreation)

                    @Html.HiddenFor(m => m.UserMAJ)
                    @Html.HiddenFor(m => m.DateMAJ)

                    Previgesst.Sessions.sessionInfo session = (Previgesst.Sessions.sessionInfo)Session["utilisateur"];
                    var nomUtilisateur = session?.Nom;

                    <div class="row mt-3">
                        <div class="col-12 col-md-6">
                            <p>
                                @Html.LabelFor(m => m.Createur, new { @class = "create-title" })
                                <span class="create-value">@Model.Createur</span>
                            </p>
                            <p>
                                <span class="create-title">
                                    @Html.LabelFor(m => m.DateCreation, new { @class = "create-title" })
                                </span>
                                <span class="create-value">@Model.DateCreation</span>
                            </p>
                        </div>

                        <div class="col-12 col-md-6">
                            <p>
                                @Html.LabelFor(m => m.UserMAJ, new { @class = "create-title" })
                                <span class="create-value">@Model.UserMAJ</span>
                            </p>

                            <p>
                                <span class="create-title">
                                    @Html.LabelFor(m => m.DateMAJ, new { @class = "create-title" })
                                </span>
                                <span class="create-value">@Model.DateMAJ</span>
                            </p>
                        </div>

                        <div class="col-12 col-md-12">
                            <p>
                                @Html.LabelFor(m => m.NomClient, new { @class = "create-title" })
                                <span class="create-value">@Model.NomClient</span>
                            </p>
                        </div>


                        <div class="col-12 col-md-6">
                            <div class="mt-2">
                                @Html.LabelFor(m => m.NoRef, new { @class = "form-label d-block" })

                                @Html.TextBoxFor(m => m.NoRef, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.NoRef, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-12 col-md-6">
                            <div class="mt-3">
                                @Html.LabelFor(m => m.Participants, new { @class = "form-label d-block" })

                                @Html.TextBoxFor(m => m.Participants, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Participants, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="col-12 col-md-6">
                            <div class="mt-3">
                                @Html.LabelFor(m => m.Equipement, new { @class = "form-label d-block" })
                                @Html.TextBoxFor(m => m.Equipement, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Equipement, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="col-12 col-md-12">
                            <div class="mt-4">
                                <div class="squaredThree squaredThree-blue d-inline-block">
                                    <input type="checkbox" id="AfficherChezClient" name="AfficherChezClient" @(Model.AfficherChezClient ? "checked" : "") value="@Convert.ToString(Model.AfficherChezClient).ToLower()" />
                                    <label for="AfficherChezClient" class="control-label"><span>@Html.DisplayNameFor(m => m.AfficherChezClient) </span></label>
                                </div>

                                @Html.ValidationMessageFor(m => m.AfficherChezClient, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="col-12 col-md-12 text-end">
                            <div class="mt-3">
                                <input type="submit" class="btn btn-mettre m-1" value="@ARCreateRES.Enregistrer" />
                                <input type="button" class="btn btn-primary m-1" value="@ARCreateRES.Renumeroter" onclick="RenumeroterLignes()" />
                            </div>
                        </div>


                    </div>

                }

            </div>


            <div id="Lignes" class="tab-pane">


                <div class="table-top-header">
                    <div class="page-title d-flex justify-content-center align-items-center">
                        <h3 class="m-0">@ARCreateRES.Lignes</h3>
                    </div>
                    <div class="page-table-meta">
                        <div class="add-icon">
                            <a id="btnAddLignes">
                                <img src="/content/v2/images/plus-icon.svg" />
                            </a>
                        </div>
                    </div>
                </div>


                @Html.AntiForgeryToken()

                @(Html.Kendo().Grid<LigneAnalyseRisqueEditViewModel>()
                            .Name("list")
                            .Columns(columns =>
                            {
                                columns.Bound(c => c.Rang).Title(ARLignesRES.RangListe)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("60px");


                                columns.Bound(c => c.Operation)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("160px");

                                columns.Bound(c => c.Zone)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("180px");

                                columns.Bound(model => model.IndiceFinalAvantTEXTE).Title(ARLignesRES.IndiceAvantListe)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("80px");

                                columns.Bound(c => c.PhenomeneDescription).Title(ARLignesRES.PhenomeneDescriptionListe)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("210px");

                                columns.Bound(model => model.IndiceFinalApresTEXTE).Title(ARLignesRES.IndiceApresListe)
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("80px");

                                columns.Bound(c => c.ConformiteAuNormes).Title(ARLignesRES.ConformiteListe)
                                    //.ClientTemplate("<center><input disabled type='checkbox' #= ConformiteAuNormes ? checked='checked' :'' # /></center>")
                                    .ClientTemplate("<center><div class='squaredThree'><input type='checkbox' disabled name='check' #=ConformiteAuNormes ? checked='checked' :'' # /><label for='squaredone'><span> </span></label></div></center>")
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                    .ForString(str => str.Clear()
                                    .Contains(GridRES.Contains)
                                    .StartsWith(GridRES.StartsWith)
                                    .IsEqualTo(GridRES.Egale)
                                    .IsNotEqualTo(GridRES.NotEquals)
                                ))).Width("110px");

                                columns.Bound(bt => Model.Id)
                                    .ClientTemplate("<a onclick='return duplicateFunction(#=IdLigneAnalyseRisqueEditor#, this)' href='../../AnalyseRisque/DuplicateLigneAnalyseRisque/#= " + nameof(LigneAnalyseRisqueEditViewModel.IdLigneAnalyseRisqueEditor) + " #' class='k-cde-edit btn-table btn-duplicate' ><img src='/content/v2/images/dup-icon.svg' alt='Duplicate'> " + ARCreateRES.Dupliquer + "</a>")
                                    .Title(ARCreateRES.Vide).Filterable(false).Sortable(false)
                                    .Width("90px");
                                //.Hidden(!Model.AfficherChezClient);

                                columns.Command(command => {
                                    command.Edit().Text(ARCreateRES.Editer).HtmlAttributes(new { @class = "btn-table btn-edit" });
                                    command.Custom(ARCreateRES.Vide).Click("ConfirmDeleteRow")
                                           .HtmlAttributes(new { @class = "k-grid-dupliquer btn-table btn-del" }); })
                                           .Width("130px")
                                           .HtmlAttributes(new { @class = "text-nowrap"})
                                           ;
                            })
                            .Sortable(s => s.AllowUnsort(false))
                            .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                            .Filterable()
                            .DataSource(ds => ds
                                .Ajax()
                                .PageSize(20)
                                .Model(m =>
                                {
                                    m.Id(e => e.IdLigneAnalyseRisqueEditor);
                                })
                                .Read(r => r.Action("ReadLigneAnalyseRisque", "AnalyseRisque", new { id = Model.Id }))
                                .Create(c => c.Action("CreateLigneAnalyseRisque", "AnalyseRisque", new { idAnalyseRisque = Model.Id }))
                                .Update(u => u.Action("UpdateLigneAnalyseRisque", "AnalyseRisque", new { idAnalyseRisque = Model.Id }))
                                .Destroy(d => d.Action("DeleteLigneAnalyseRisque", "AnalyseRisque"))
                                .Events(e => e.Error("ListeErreur"))
                            )
                            .Events(e => e.DataBound("ListeDataBound"))
                            .Editable(e => e.DisplayDeleteConfirmation(false))
                            .Scrollable(s => s.Enabled(true).Height("auto"))
                            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneAnalyseRisqueEditor").Window(w => w.Title(ARLignesRES.Edition).Width(950).Name("editWindow")))

                        .ToolBar(tb =>
                        {
                            tb.Create().HtmlAttributes(new { @class = "d-none" });
                        })
                    )


            </div>
        
        
        </div>


    </div>

</main>

<script type="text/javascript">

    function ConfirmDeleteRow(e) {
        e.preventDefault();
        //debugger;
        var grid = this;
        console.dir(grid);
        var row = $(e.currentTarget).closest("tr");
        console.log('row ' + row);
        var dataItem = this.dataItem(row);
        console.log('dataItem ' + dataItem);

        ShowDeleteConfirm("@ARLignesRES.Ligne " + dataItem.Rang, function (args) {
            console.log('ShowDeleteConfirm IN !!');
            console.dir(args);
            if (args.confirmed === true) {
                console.log('IN ShowDeleteConfirm');
                console.dir(grid.removeRow);
                grid.removeRow(row);
            }
        });
     }

    function ListeErreur(args) {
        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    ShowNotification("@ARCreateRES.Erreur", errorList, "errorListTemplate");
                });
            });
        }
        else if (args.xhr) {
            ShowGridError("@Html.Raw(ARCreateRES.Erreur)", selecteurGrid, args, "@Html.Raw(LayoutRES.LinkedEntityError)");
        }
    }

    function ListeDataBound(e) {
        //var selecteurGrid = "#list";
        //var grid = $(selecteurGrid).data("kendoGrid");
    }


    function RenumeroterLignes() {
        var dataInput = {
            AnalyseId: $("#@Html.IdFor(m => m.Id)").val()
        };

        $.ajax({
            url: '@Url.Action("RenumeroterLignes")',
            type: "POST",
            data: JSON.stringify(dataInput),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                // reload de la grille
                $('#list').data('kendoGrid').dataSource.read();
                $('#list').data('kendoGrid').refresh();
            }
        })
    }

    function duplicateFunction(IdLigneAnalyseRisqueEditor) {
       // debugger;
        var dataInput = {
            Id: IdLigneAnalyseRisqueEditor
        };

        $.ajax({
            data: JSON.stringify(dataInput),
            url: '@Url.Action("DuplicateLigneAnalyseRisque")',
            type: "POST",

            contentType: "application/json; charset=utf-8",
            success: function (result) {
                $("#list").data("kendoGrid").dataSource.read();
            },
            error: function (data) {
            }
        })
        $("#list").data("kendoGrid").dataSource.read();
        return false;
    }

    $('#btnAddLignes').off().on('click', function () {
        $('#list').find('.k-grid-add.d-none').click();
    });
</script>
