@using Previgesst.Ressources
@model IEnumerable<UserListViewModel>
@{
    ViewBag.Title = "Utilisateurs";
    Layout = "~/Views/Shared/_Layout_v2.cshtml";
}

@section styles{
    <link href="~/Content/kendo/2016.2.714/kendo.common-bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/v2/grid-override.css" rel="stylesheet" />
}

@section sidebar{

    <ul class="nav flex-column sidebar-nav" role="tablist">
        <li class="nav-item text-center mt-2">
            <a class="nav-link home-navlink" role="tab" data-toggle="tab" href='@Url.Action("Index", "AdminPrevi")'>
                <img src="/content/v2/images/icon-home.png" /><p class="nav-link-text">@LayoutRES.Accueil</p>
            </a>
        </li>

        @*<li class="nav-item text-center active">
                <a class="nav-link home-navlink" role="tab" data-toggle="tab" data-bs-toggle="tab" href="#Fiches" id="Fich">
                    <img src="/content/v2/images/Procédures.svg">
                    <p class="nav-link-text">@Model.Type</p>
                </a>
            </li>*@
    </ul>
}

<main class="main-container-wrapper page-container">
    <div class="breadcrumbs-nav-wrapper">
        <ul class="breadcrumbs">
            <li><a href='@Url.Action("Index", "AdminPrevi")'>@LayoutRES.Accueil</a></li>
            <li class="active">@ManageRES.ListUsers</li>
        </ul>
    </div>


    <div class="main-page-content">


        <div class="table-top-header">
            <div class="page-title">
                <h3>@ManageRES.ListUsers</h3>
            </div>
            <div class="page-table-meta">
                <div class="add-icon" onclick="window.location.href='@Url.Action("EditUser", "Manage", new { })'">
                    <img src="/content/v2/images/plus-icon.svg" />
                </div>
            </div>
        </div>






        @(Html.Kendo().Grid<UserListViewModel>()
            .Name("user-list")
            .Columns(columns =>
            {
                columns.Bound(u => u.UserName).Filterable(f => f.Extra(false));

                columns.Bound(u => u.Email).Filterable(f => f.Extra(false));

                columns.Bound(u => u.Inactive)
                        //.ClientTemplate("<input type='checkbox' ${ " + nameof(UserListViewModel.Inactive) + " == true ? 'checked' : ''} disabled />")
                        .ClientTemplate("<center><div class='squaredThree'><input type='checkbox'id='squaredone' name='check' ${ " + nameof(UserListViewModel.Inactive) + " == true ? 'checked' : ''} disabled /><label for='squaredone'><span> </span></label></div></center>")
                        .HtmlAttributes(new { @class = "text-center" })
                        .HeaderHtmlAttributes(new { @class = "text-center" });

                columns.Bound(u => u.UserId)
                    .ClientTemplate("<a href='" + Url.Action("EditUser", "Manage") + "/#= " + nameof(UserListViewModel.UserId) + " #' class='btn btn-editicon'></a>")
                    .Title("").Filterable(false).Sortable(false).Width("70px");
            })
            .Sortable()
            .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 10, 25, 50, 100 }).Input(true).Info(false).Numeric(false))
            .Filterable()
            .DataSource(ds => ds
                .Ajax()
                .PageSize(50)
                .Sort(s => s.Add(nameof(UserListViewModel.UserName)).Ascending())
                .Read(r => r.Action("UserRead", "Manage")))
                .Events(e => e      //Garder les filtres pour la durée de la session du client
                .DataBound("dataBoundKendo")
                .Change("changeKendo")
                .ColumnHide("columnHideKendo")
                .ColumnShow("columnShowKendo")
                .ColumnReorder("columnReorderKendo"))
        )
    </div>
</main>

@section Scripts
{

    <script type="text/javascript">

        //$(document).ready(function () {
        //    $('sidebar').hide();
        //});

        var uniqueName = '@ViewContext.RouteData.Values["controller"]' + '@ViewContext.RouteData.Values["action"]' + '1_';
        var colState = uniqueName + "columnState";
        var gridState = uniqueName + "gridState";
        var gridRows = uniqueName + "gridRows";

                //On page ready, apply any exisiting cookie grid state
        $(function () {
            var grid = $("#user-list").data("kendoGrid");

            var state = JSON.parse($.cookie(gridState) || null);
            var currentColumnState = JSON.parse($.cookie(colState) || null);

            if (currentColumnState && currentColumnState.length > 0) {
                for (var i = 0; i < currentColumnState.length; i++) {
                    grid.hideColumn(currentColumnState[i]);
                }
            }

            if (state) {
                if (state.filter) {
                    parseFilterDates(state.filter, grid.dataSource.options.schema.model.fields);
                }
                grid.dataSource.query(state);
            } else {
                grid.dataSource.read();
            }

            //Bind the grid to dataBound so that changes the user make are sent to the save routine
            grid.bind("dataBinding", dataBoundKendo);
        });


        function parseFilterDates(filter, fields) {
            if (filter.filters) {
                for (var i = 0; i < filter.filters.length; i++) {
                    parseFilterDates(filter.filters[i], fields);
                }
            } else {
                if (fields[filter.field].type == "date") {
                    filter.value = kendo.parseDate(filter.value);
                }
            }
        }


                //When the grid is databound, or changes made, persist them
        function dataBoundKendo(e) {
            var grid = this;
            var dataSource = this.dataSource;

            var state = kendo.stringify({
                page: dataSource.page(),
                pageSize: dataSource.pageSize(),
                sort: dataSource.sort(),
                group: dataSource.group(),
                filter: dataSource.filter()
            });

            var currentColumnState = [];
            for (var i = 0; i < grid.columns.length; i++) {
                if (grid.columns[i].hidden) {
                    currentColumnState.push(grid.columns[i].field);
                }
            }
            $.cookie(colState, JSON.stringify(currentColumnState));

            $.cookie(gridState, state);

            if ($.cookie(gridRows)) {
                $.each(JSON.parse($.cookie(gridRows)), function () {
                    var item = dataSource.get(this);
                    var row = grid.tbody.find('[data-uid=' + item.uid + ']');
                    row.addClass('k-state-selected');
                });
            }
        }

        function columnHideKendo(e) {
            setTimeout(function () {
                e.sender.trigger("dataBoundKendo");
            });
        }

        function columnShowKendo(e) {
            setTimeout(function () {
                e.sender.trigger("dataBoundKendo");
            });
        }

        function columnReorderKendo(e) {
            setTimeout(function () {
                e.sender.trigger("dataBoundKendo");
            });
        }

        function changeKendo() {
            var grid = this;
            var ids = grid.select().map(function () {
                return grid.dataItem($(this)).Id;
            }).toArray();
            $.cookie(gridRows, JSON.stringify(ids));
        }
    </script>
}
