
@model ViewSimpleListViewModel
@{
    ViewBag.Title = "Analyses";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="container tableauStandard">

    <div class="row">

        <div class="col-md-12 ">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">


                    <li class="breadcrumb-item active" aria-current="page">@Html.Raw(Model.NomListe)</li>
                </ol>
            </nav>

            <hr />

            <div class="panel panel-danger">

                <div class="panel-heading" style="font-size:larger;font-weight:500;background-color:#0c5c82;color:white">Édition @Html.Raw(Model.NomListe)</div>
                <div class="panel-body">

                    <span id="spanType" class="hidden"> @Model.Type</span>


                    @Html.AntiForgeryToken()

                    @(Html.Kendo().Grid<SimpleListViewModel>()
                                                    .Name("list")
                                                    .Columns(columns =>
                                                    {
                                                        columns.Bound(e => e.Id).Hidden();
                                                        columns.Bound(c => c.Description)//.EditorTemplateName("MyView")
                                                           .Filterable(f => f.Extra(false).Operators(operators => operators
                                                        .ForString(str => str.Clear()
                                                 .Contains("Contient")
                                                            .StartsWith("Commence par")
                                                            .IsEqualTo("Égal")
                                                            .IsNotEqualTo("Différent")
                                                           ))); 
                                                      
                                                       
                                                        columns.Bound(c => c.DescriptionEN)//.EditorTemplateName("MyView")
                                                          .Filterable(f => f.Extra(false).Operators(operators => operators
                                                       .ForString(str => str.Clear()
                                                .Contains("Contient")
                                                           .StartsWith("Commence par")
                                                           .IsEqualTo("Égal")
                                                           .IsNotEqualTo("Différent")
                                                          ))); ;
                                                        columns.Command(c =>
                                                        {
                                                            c.Edit();
                                                            c.Custom("Effacer")
                                                                .Click("ConfirmDeleteRow")
                                                                .HtmlAttributes(new { @class = "k-grid-effacer" });
                                                        })
                                                        .Width(250);
                                                    })
                                                    .Sortable(s => s.AllowUnsort(false))
                                                    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10 }).Input(true).Info(false).Numeric(false))
                                                    .Filterable()
                                                    //.AutoBind(false)
                                                    .DataSource(ds => ds
                                                        .Ajax()
                                                        .PageSize(10).Sort(x => x.Add(c => c.Description))

                                                    .Model(m =>
                                                    {
                                                        m.Id(e => e.Id);
                                                        m.Field(e => e.Description);
                                                        m.Field(e => e.Suppressible).DefaultValue(true);
                                                    })
                                                    .Read(r => r.Action("GetListRead", "Listes", new { iditem = Model.Type }))
                                                    .Create(c => c.Action("Save", "Listes", new { iditem = Model.Type }))
                                                    .Update(u => u.Action("Save", "Listes", new { iditem = Model.Type }))
                                                    .Destroy(d => d.Action("Delete", "Listes", new { iditem = Model.Type }))
                                                    .Events(e => e
                                                        .Error("ListeErreur")
                                                    )
                                                )
                                                .Events(e => e
                                                    .DataBound("ListeDataBound")

                                                )
                                                .Editable(e => e
                                                    .Mode(GridEditMode.InLine)
                                                    .CreateAt(GridInsertRowPosition.Top)
                                                    .DisplayDeleteConfirmation(false)
                                                )
                                                .ToolBar(t =>
                                                {
                                                    t.Create();
                                                })
                    )
                </div>
            </div>
        </div>
    </div>
</div>

            <script type="text/javascript">

                var titre = $("#spanType").html();                                                            

                    $("a.k-grid-add").removeClass("k-button  k-button-icontext");
                    $("a.k-grid-add").addClass("btn btn-success ListGlobal");
                    $("span.k-add").removeClass("k-icon");
                    $("a.ListGlobal").text("Ajouter");                 

                   

                function ConfirmDeleteRow(e) {
                    e.preventDefault();

                    var grid = this;
                    var row = $(e.currentTarget).closest("tr");
                    var dataItem = this.dataItem(row);

                    ShowDeleteConfirm(dataItem.Description, function (args) {
                        if (args.confirmed === true) {
                            grid.removeRow(row);
                        }
                    });
                }



                function ListeErreur(args) {
                    var selecteurGrid = "#list";
                    if (args.errors) {
                        var grid = $(selecteurGrid).data("kendoGrid");
                        var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
                        grid.one("dataBinding", function (e) {
                            e.preventDefault();

                            $.each(args.errors, function (propertyName) {
                                var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                                ShowNotification("Erreur - Gestions",
                                    errorList,
                                    "errorListTemplate");
                            });
                        });
                    }
                }

                function ListeDataBound(e) {



                    var selecteurGrid = "#list";
                    var grid = $(selecteurGrid).data("kendoGrid");


                    //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");



                    //Selects all delete buttons
                    $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
                        var currentDataItem = grid.dataItem($(this).closest("tr"));

                        //Check in the current dataItem if the row is deletable
                        if (!currentDataItem.Suppressible) {

                            $(this).remove();
                        }
                    })
                }








            </script>
