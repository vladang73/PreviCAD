@using Previgesst.Ressources

@{
    ViewBag.Title = "Analyses";
    Layout = "~/Views/Shared/_LayoutClient.cshtml";
}


<hr />


<ul class="nav nav-tabs" role="tablist">
    <li role="presentation" class="active">
        <a href="#Fiches" aria-controls="general" role="tab" data-toggle="tab">Fiches de cadenassage</a>
    </li>
    <li role="presentation">
        <a href="#Documents" aria-controls="pratiques" role="tab" data-toggle="tab">Documents</a>
    </li>

</ul>


<div class="tab-content">



    <div id="Fiches" class="tab-pane active">




        <h3>
            Liste des fiches de cadenassage - Compagnie ABC
        </h3>
        <br />
        @Html.AntiForgeryToken()

        @(Html.Kendo().Grid<CadenassageViewModel>()
    .Name("list")
    .Columns(columns =>
    {

        columns.Bound(c => c.NoFiche).Width(200)
                .Filterable(f => f.Extra(false).Operators(operators => operators
                .ForString(str => str.Clear()
                .Contains(GridRES.Contains)
                .StartsWith(GridRES.StartsWith)
                .IsEqualTo(GridRES.Egale)
                .IsNotEqualTo(GridRES.NotEquals)
           )));
        columns.Bound(c => c.Departement).Width(300)
           .Filterable(f => f.Extra(false).Operators(operators => operators
        .ForDate(d => d.Clear()
            .IsEqualTo("Égal")
            .IsGreaterThan("Plus grand")
            .IsGreaterThanOrEqualTo("Plus grand ou égal")
            .IsLessThan("Plus petit")
            .IsLessThanOrEqualTo("Plus petit ou égal")
           ))).Format("{0:" + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + "}");

        columns.Bound(c => c.Equipement).Width(300)
           .Filterable(f => f.Extra(false).Operators(operators => operators
        .ForDate(d => d.Clear()
            .IsEqualTo("Égal")
            .IsGreaterThan("Plus grand")
            .IsGreaterThanOrEqualTo("Plus grand ou égal")
            .IsLessThan("Plus petit")
            .IsLessThanOrEqualTo("Plus petit ou égal")
           ))).Format("{0:" + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + "}");

        columns.Bound(c => c.Travail).Width(300)
           .Filterable(f => f.Extra(false).Operators(operators => operators
        .ForDate(d => d.Clear()
            .IsEqualTo("Égal")
            .IsGreaterThan("Plus grand")
            .IsGreaterThanOrEqualTo("Plus grand ou égal")
            .IsLessThan("Plus petit")
            .IsLessThanOrEqualTo("Plus petit ou égal")
           ))).Format("{0:" + System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern + "}");


        columns.Bound(e => e.CadenasId).ClientTemplate("<a href='~/AnalyseRisque/Edit?ID=#= " + nameof(CadenassageViewModel.CadenasId) + " #' class='btn btn-info' style='float:right'>Télécharger</a>").Title("").Filterable(false).Sortable(false).Width(100);
        columns.Bound(e => e.CadenasId).ClientTemplate("<a href='~/AnalyseRisque/Edit?ID=#= " + nameof(CadenassageViewModel.CadenasId) + " #' class='btn btn-primary' style='float:right'>Modifier</a>").Title("").Filterable(false).Sortable(false).Width(100);
        columns.Bound(e => e.CadenasId).ClientTemplate("<a href='~/AnalyseRisque/Edit?ID=#= " + nameof(CadenassageViewModel.CadenasId) + " #' class='btn btn-danger' style='float:right'>Supprimer</a>").Title("").Filterable(false).Sortable(false).Width(100);

    })
    .Sortable(s => s.AllowUnsort(false))
    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
    .Filterable()
    .DataSource(ds => ds
        .Ajax()
        //.Group(g => g.Add(c => c.NomClient))
        .PageSize(20)
        .Model(m =>
        {
            m.Id(e => e.CadenasId);
        })
        .Read(r => r.Action("ReadListAnalyseRisque", "MesApplications"))
        .Create(c => c.Action("Save", "Listes"))
        .Events(e => e
            .Error("ListeErreur")
        )
    )
    .Events(e => e
        .DataBound("ListeDataBound")
    )
    .ToolBar(tb =>
    {
    tb.Template(@<a href="~/AnalyseRisque/Create" class="btn btn-success"><i class="fa fa-plus"></i> Ajouter une nouvelle procédure de cadenassage</a>);
    })
        )


    </div>
    <div id="Documents" class="tab-pane">


        @(Html.Kendo().Grid<DocumentViewModel>()
    .Name("liste")
    .Columns(columns =>
    {
        columns.Bound(c => c.Titre)
                .Filterable(f => f.Extra(false).Operators(operators => operators
                .ForString(str => str.Clear()
                .Contains(GridRES.Contains)
                .StartsWith(GridRES.StartsWith)
                .IsEqualTo(GridRES.Egale)
                .IsNotEqualTo(GridRES.NotEquals)
           )));

        columns.Bound(e => e.DocumentId).ClientTemplate("<a href='~/AnalyseRisque/Edit?ID=#= " + nameof(DocumentViewModel.DocumentId) + " #' class='btn btn-info' style='float:right'>Télécharger le document</a>").Title("").Filterable(false).Sortable(false).Width(200);
    })
    .Sortable(s => s.AllowUnsort(false))
    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
    .Filterable()
    .DataSource(ds => ds
        .Ajax()
        .PageSize(20)
        .Model(m =>
        {
            m.Id(e => e.DocumentId);
        })
        .Read(r => r.Action("ReadListCadenas", "Documents"))
        .Create(c => c.Action("Save", "Listes"))
        .Events(e => e.Error("ListeErreur"))
    )


)




    </div>
</div>


<script type="text/javascript">

    function ConfirmDeleteRow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.Description, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }



    function ListeErreur(args) {
        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    ShowNotification("Erreur - Gestions", errorList, "errorListTemplate");
                });
            });
        }
        else if (args.xhr) {
            ShowGridError("Erreur - Gestions", selecteurGrid, args);
        }
    }

    function ListeDataBound(e) {
        //var selecteurGrid = "#list";
        //var grid = $(selecteurGrid).data("kendoGrid");


        ////Selects all delete buttons
        //$(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
        //    var currentDataItem = grid.dataItem($(this).closest("tr"));

        //    //Check in the current dataItem if the row is deletable
        //    if (!currentDataItem.Suppressible) {

        //        $(this).remove();
        //    }
        //})
    }

</script>
