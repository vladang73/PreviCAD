
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">

    <div class="row">

        <div class="col-md-12 ">


            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="~/AdminPrevi/Index">Accueil</a></li>

                    <li class="breadcrumb-item active" aria-current="page">Sections des documents</li>
                </ol>
            </nav>

            <hr />
            <div class="panel panel-danger sectionEdition">

                <div class="panel-heading back-panel" style="font-size:larger;font-weight:500;background-color:#0c5c82;color:white">Édition des sections</div>
                <div class="panel-body">


                    <div id="Documents" class="tab-pane">

                        @Html.AntiForgeryToken()

                        @(Html.Kendo().Grid<SectionViewModel>()
                        .Name("list")
                        .Columns(columns =>
                        {

                            columns.Bound(e => e.SectionId).Hidden();

                            columns.Bound(c => c.ApplicationName).Filterable(f => f.Extra(false).Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains("Contient")
                    .StartsWith("Commence par")
                    .IsEqualTo("Égal")
                    .IsNotEqualTo("Différent")
                    ))).Hidden();


                            columns.Bound(c => c.Nom)
                                 .Filterable(f => f.Extra(false).Operators(operators => operators
                              .ForString(str => str.Clear()
                              .Contains("Contient")
                                  .StartsWith("Commence par")
                                  .IsEqualTo("Égal")
                                  .IsNotEqualTo("Différent")
                                 )));


                            columns.Bound(c => c.Ordre)
                            .Filterable(false);

                            columns.Command(c =>
                            {
                                c.Edit();
                                c.Custom("Effacer")
                                      .Click("ConfirmDeleteRow")
                                      .HtmlAttributes(new { @class = "k-grid-effacer" });

                            })
                               .Width(250);

                        })

                        .Sortable(s => s.AllowUnsort(false))
                        .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                        .Filterable()
                        .DataSource(ds => ds
                            .Ajax()
                               //.Sort( x=> x.Add (c => c.DisplaySection))
                               //.Sort(x => x.Add(c => c.Ordre))
                               .Group(g => g.Add(c => c.ApplicationName))
                            .PageSize(20)
                            .Model(m =>
                            {
                                m.Id(e => e.SectionId);



                            })

                        .Read(r => r.Action("ReadListSections", "Section"))
                        .Create(c => c.Action("SaveSection", "Section"))
                        .Update(u => u.Action("SaveSection", "Section"))
                        .Destroy(u => u.Action("DeleteSection", "Section"))


                        .Events(e => e
                            .Error("ListeErreur").RequestEnd("end")
                        )
                        )

                        .Events(e => e
                            .DataBound("ListeDataBound")

                        ).
                        Editable(e => e.DisplayDeleteConfirmation(false)).
                        Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EditSection").Window(w => w.Title("Édition d'un document").Width(600).Name("editWindow")))


                @*.ToolBar(tb =>
                    {
                    tb.Template(@<a href="/File/CreateARDoc" class="btn btn-success"><i class="fa fa-plus"></i> Ajouter un nouveau document</a>);
                    }*@

                .ToolBar(t =>
                {
                t.Create().Text("Ajouter").HtmlAttributes(new { @class = "btn btn-success" });
                })
                        )


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

    $("a.k-grid-add").removeClass("k-button  k-button-icontext");
    $("span.k-add").removeClass("k-icon");

    function end(e) {
        // reload de la grille car pas de refresh sur application mise à jour

        if (e.type == "update") {
            var grid = $("#list").data("kendoGrid");
            grid.dataSource.read();

        }

    }

    function ConfirmDeleteRow(e) {

        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.Nom, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });

    }


    function ListeErreur(args) {

        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("Erreur - Gestions",
                        errorList,
                        "errorListTemplate");
                });
            });
        }



    }

    function ListeDataBound(e) {



        var selecteurGrid = "#list";
        var grid = $(selecteurGrid).data("kendoGrid");


        //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");



        //Selects all delete buttons
        $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
            var currentDataItem = grid.dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (!currentDataItem.Suppressible) {

                $(this).remove();
            }
        })
    }

</script>