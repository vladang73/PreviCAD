@using Previgesst.Ressources.Cadenassage
@using Previgesst.Ressources
@model Previgesst.ViewModels.EditCadenassageViewModel



<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3 class="m-0">@CadEditRES.Programme</h3>
    </div>
    <div class="page-table-meta">
        <div class="add-icon">
            <a id="btnAddDoc">
                <img src="/content/v2/images/plus-icon.svg" />
            </a>
        </div>
    </div>
</div>


<div id="Documents">

    @Html.AntiForgeryToken()

    @(Html.Kendo().Grid<DocumentClientViewModel>()
                .Name("liste-doc")
                .Columns(columns =>
                {

                    columns.Bound(e => e.DocumentClientId).Hidden();
                    columns.Bound(c => c.ApplicationPreviId).Hidden();
                    columns.Bound(c => c.ClientId).Hidden();

                    columns.Bound(c => c.Titre).Filterable(f => f.Extra(false).Operators(operators => operators
                        .ForString(str => str.Clear()
                        .Contains(GridRES.Contains)
                        .StartsWith(GridRES.StartsWith)
                        .IsEqualTo(GridRES.Egale)
                        .IsNotEqualTo(GridRES.NotEquals)
                    )))
                    .Hidden();


                    columns.Bound(c => c.Titre)
                         .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                    )))
                    .HtmlAttributes(new { @class = "td-round-left-border" })
                    ;

                    columns.Bound(c => c.FileName).EditorTemplateName("UploadEditor").Encoded(false).Sortable(false).Filterable(false);

                    columns.Bound(e => e.Bidon).EditorTemplateName("Vide")
                           //.ClientTemplate("<a href='#=BasePath#' class='FicheClientDownload' style='float:right'><img style='width:40px;' src='/Images/dl.png' title='"+ CadProgRES.Telecharger +"'></a>")
                           .ClientTemplate("<a href='#=BasePath#' class='FicheClientDownload'><img src='/content/v2/images/fr-icon.svg' title='" + CadProgRES.Telecharger + "'></a>")
                           .Title("").Filterable(false).Sortable(false).Width("60px");

                    columns.Command(c =>
                    {
                        c.Edit().Text(" ").HtmlAttributes(new { @class = "btn-table btn-edit" });
                        c.Custom(CadProgRES.Vide)
                              .Click("ConfirmDeleteRow")
                              .Text("")
                              .HtmlAttributes(new { @class = "k-grid-effacer kendoDanger btn-del" });

                    })
                    .Width("150px").Hidden(!Model.estUpdate);

                })

                .Sortable(s => s.AllowUnsort(false))
                .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                .Filterable()
                .DataSource(ds => ds
                    .Ajax()
                    .PageSize(20)
                    .Model(m =>
                    {
                        m.Id(e => e.DocumentClientId);
                        m.Field(e => e.Bidon).Editable(true);
                    })

                .Read(r => r.Action("ReadListDocClientCadenassage", "Documents", new { id = Model.ClientId }))
                .Create(c => c.Action("SaveDocClientCadenassage", "Documents", new { id = Model.ClientId }))
                .Update(u => u.Action("SaveDocClientCadenassage", "Documents", new { id = Model.ClientId }))
                .Destroy(u => u.Action("DeleteDocumentClient", "Documents"))


                .Events(e => e.Error("docListeErreur"))
            )

            .Events(e => e.DataBound("docListeDataBound").Edit("OnDocEdit"))
            .Editable(e => e.DisplayDeleteConfirmation(false))
            .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneDocumentClientEditor").Window(w => w.Title(CadProgRES.MiseAJour).Width(600).Name("editWindow")))

           @*.ToolBar(tb =>
                {
                tb.Template(@<a href="/File/CreateARDoc" class="btn btn-success"><i class="fa fa-plus"></i> Ajouter un nouveau document</a>);
           })*@

            .ToolBar(t =>
            {
                t.Create().HtmlAttributes(new { @class = "btn-docClient d-none" });
            })

            .Scrollable()
            .HtmlAttributes(new { @class = "k-grid-height" })
        )


</div>

<script>
    @*
    $('#DocCli').click(function () {
   $("#liste-doc").find("a.k-grid-add" ).removeClass("k-button  k-button-icontext");
        $("#liste-doc").find("a.k-grid-add").addClass("btn btn-success btn-docClient");
        $("#liste-doc").find("span.k-add").removeClass("k-icon");

         var estUpdate = '@Model.estUpdate';
        if (estUpdate == 'False') {
            $("#liste-doc").find("a.btn-docClient").hide();
        }

        $("a.btn-docClient").text("@CadProgRES.Ajouter");

        // ADD ICONE "+"
        setTimeout(function(){ $("#liste-doc").find(".btn-success").append('<img class="addButtonImg" src="/Images/addWhite.png">'); }, 50);

    });
*@


    function ConfirmDeleteRow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.FileName, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }


    function docListeErreur(args) {
        var selecteurGrid = "#liste-doc";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("@CadProgRES.Erreur",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function docListeDataBound(e) {
    }


    function fileSelect(e) {

        var extension = e.files[0].extension.toLowerCase().trim();
        var size = e.files[0].size;
        var estClient = '@Model.estClient';

        if (extension != ".xlsx" && extension != ".docx" && extension != ".pdf" && extension != ".xls" && extension != ".doc") {
            e.preventDefault();

            ShowNotification("@CadProgRES.AttentionEntete", "@CadProgRES.AttentionType", "errorTemplate")
        }
        else {
            if (estClient == 'True' && size > 3 * 1024 * 1024) {
                e.preventDefault();

                ShowNotification("@CadProgRES.AttentionEntete", "@CadProgRES.AttentionTaille", "errorTemplate")
            }
        }
    }

    function fileSuccess(e) {
        var z = $('.k-popup-edit-form');

        var gview = $("#liste-doc").data("kendoGrid");

        var row = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");

        var item = gview.dataItem(row);

        item.set('Titre', e.response.Titre);

        item.set('DocumentClientId', e.response.DocumentClientId);

        item.set('FileName', e.response.NomFichier);
        item.set('BasePath', e.response.BasePath);

    }



    function fileUpload(e) {
        //   alert (this.dataItem)

        var z = $('.k-popup-edit-form');

        var gview = $("#liste-doc").data("kendoGrid");

        var item = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");

        var selectedItem = gview.dataItem(item);

        selectedItem.dirty = true;

        e.data = { DocumentClientId: selectedItem.DocumentClientId, ClientId:@Model.ClientId, Titre: selectedItem.Titre };
    }


    $('#btnAddDoc').click(function () {
        $("#Documents").find("a.k-grid-add").click();
    });

    function OnDocEdit(e) {
        console.log('changing buttons');
        jQuery('.k-grid-update').removeClass('btn-edit').addClass('btn-mettre m-1');
        jQuery('.k-grid-cancel').removeClass('btn-edit').addClass('btn-Annuler m-1');

        $('.k-widget.k-window').addClass('blue-header');
    }

</script>