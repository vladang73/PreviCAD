@using Previgesst.Ressources
@using Previgesst.Ressources.Cadenassage
@model Previgesst.ViewModels.EditCadenassageViewModel


<div class="panel panel-danger">

    @*<div class="panel-heading" style="font-
            size:larger;font-weight:500;background-color:#E39901;color:white">Équipements </div>
        <div class="panel-body">*@


    <div class="panel-heading back-panel-light" style="font-size:larger;font-weight:500;color:white"></div>

   

    <div class="panel-body">



        @Html.AntiForgeryToken()

        @(Html.Kendo().Grid<EquipementViewModel>()
                                .Name("listEquipement")
                                .Columns(columns =>
                                {
                                    columns.Bound(e => e.EquipementId).Hidden();
                                    columns.Bound(c => c.NomEquipement)//.EditorTemplateName("MyView")
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                        .ForString(str => str.Clear()
                                            .Contains(GridRES.Contains)
                                            .StartsWith(GridRES.StartsWith)
                                            .IsEqualTo(GridRES.Egale)
                                            .IsNotEqualTo(GridRES.NotEquals)
                                        )
                                    ));
                                    columns.Bound(c => c.NomEquipementEN)//.EditorTemplateName("MyView")
                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                        .ForString(str => str.Clear()
                                            .Contains(GridRES.Contains)
                                            .StartsWith(GridRES.StartsWith)
                                            .IsEqualTo(GridRES.Egale)
                                            .IsNotEqualTo(GridRES.NotEquals)
                                        )
                                    )); ;
                                    columns.Bound(e => e.Thumbnail).ClientTemplate("<img src='#=Thumbnail#'/>").EditorTemplateName("VideView").Title("").Filterable(false).Sortable(false);
                                    columns.Bound(e => e.Thumbnail).ClientTemplate("<input type=button onclick='changerImage(#=EquipementId#)' value='Image' class='cadenassageImageDownload'/>").EditorTemplateName("VideView").Title("").Filterable(false).Sortable(false);
                                    columns.Command(c =>
                                    {
                                        c.Edit().Text("");
                                        c.Custom(CadEquipRES.Vide)
                                            .Click("ConfirmDeleteRowEQ")
                                            .HtmlAttributes(new { @class = "k-grid-effacer" });
                                    })
                                    .Width(50);
                                })
                                .Sortable(s => s.AllowUnsort(false))
                                .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10 }).Input(true).Info(false).Numeric(false))
                                .Filterable()
                                //.AutoBind(false)
                                .DataSource(ds => ds
                                    .Ajax()
                                    .PageSize(10).Sort(x => x.Add(c => c.NomEquipement))
                                    .Model(m =>
                                    {
                                        m.Id(e => e.EquipementId);
                                        m.Field(e => e.Suppressible).DefaultValue(true);
                                        m.Field(e => e.Thumbnail).Editable(false);
                                    })
                                    .Read(r => r.Action("ReadListEquipement", "Equipement", new { client = Model.ClientId }))
                                    .Create(c => c.Action("SaveEquipement", "Equipement", new { client = Model.ClientId }))
                                    .Update(u => u.Action("SaveEquipement", "Equipement", new { client = Model.ClientId }))
                                    .Destroy(d => d.Action("DeleteEquipement", "Equipement"))
                                    .Events(e => e
                                        .Error("ListeErreurEQ")
                                    )
                                )
                                .Events(e => e
                                    .DataBound("ListeDataBoundEQ").Edit("Edit")
                                )
                                .Editable(e => e
                                    .Mode(GridEditMode.InLine)
                                    .CreateAt(GridInsertRowPosition.Top)
                                    .DisplayDeleteConfirmation(false)
                                )
                                .ToolBar(t =>
                                {
                                    t.Create();
                                })
                            )
    </div>
</div>


<script type="text/javascript">


    $("#Equip").click(function () {

        $("#listEquipement").find("a.k-grid-add").removeClass("k-button  k-button-icontext");                   
        $("#listEquipement").find("a.k-grid-add").addClass("btn btn-success btn-test");
                       
        $("#listEquipement").find("span.k-grid-add").addClass("btn btn-success btn-test");   
       
        $("#listEquipement").find("a.btn-test").text("@CadEquipRES.Ajouter");

        
        // ADD ICONE "+"
        setTimeout(function(){ $("#listEquipement").find(".btn-success").append('<img class="addButtonImg" src="/Images/addWhite.png">'); }, 50);
    });

   


    
    var imageWindow;
    var timer;
    function Edit(e)
    {
        var item = $(e.container).find('[value=Image]').hide();


    }
    function changerImage(e) {

 

                  var config = {
        path: '@Url.Content("~/upload/setEquipPic/")'
    };

        imageWindow = PopupCenter(config.path + e, "@CadEquipRES.ChangerImage", 600, 300);


        timer = setInterval(checkWindow, 100);

    }

    function checkWindow()
    {

        if (imageWindow.closed) {

            $('#listEquipement').data('kendoGrid').dataSource.read();
            $("#myimg").removeAttr("src").attr("src", "/myimg.jpg");
            $('#listEquipement').data('kendoGrid').refresh();

                clearInterval(timer);
            }

    }

    function PopupCenter(url, title, w, h) {
        var userAgent = navigator.userAgent,
            mobile = function () {
                return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                    /\b(iP[ao]d)/.test(userAgent) ||
                    /Android/i.test(userAgent) ||
                    /Mobile/i.test(userAgent);
            },
            screenX = typeof window.screenX != 'undefined' ? window.screenX : window.screenLeft,
            screenY = typeof window.screenY != 'undefined' ? window.screenY : window.screenTop,
            outerWidth = typeof window.outerWidth != 'undefined' ? window.outerWidth : document.documentElement.clientWidth,
            outerHeight = typeof window.outerHeight != 'undefined' ? window.outerHeight : document.documentElement.clientHeight - 22,
            targetWidth = mobile() ? null : w,
            targetHeight = mobile() ? null : h,
            V = screenX < 0 ? window.screen.width + screenX : screenX,
            left = parseInt(V + (outerWidth - targetWidth) / 2, 10),
            right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
            features = [];
        if (targetWidth !== null) {
            features.push('width=' + targetWidth);
        }
        if (targetHeight !== null) {
            features.push('height=' + targetHeight);
        }
        features.push('left=' + left);
        features.push('top=' + right);
        features.push('scrollbars=0');
        features.push('location=0');
        features.push('menubar=0');
        features.push('title=0');
        features.push('resizable=0');



        var newWindow = window.open(url, title, features.join(','));

        if (window.focus) {
            newWindow.focus();
        }

        return newWindow;
    }




    function ConfirmDeleteRowEQ(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.NomEquipement, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }



    function ListeErreurEQ(args) {
        var selecteurGrid = "#listEquipement";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    ShowNotification("@CadEquipRES.Erreurs",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function ListeDataBoundEQ(e) {



        var selecteurGrid = "#listEquipement";
        var grid = $(selecteurGrid).data("kendoGrid");


        //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");
        $(selecteurGrid + " .k-grid-effacer");



        //Selects all delete buttons
        $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
            var currentDataItem = grid.dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (!currentDataItem.Suppressible) {

                $(this).remove();
            }
        })
    }
</script>
