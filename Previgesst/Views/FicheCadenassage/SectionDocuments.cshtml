@using Previgesst.Ressources
@using Previgesst.Ressources.Cadenassage
@model Previgesst.ViewModels.EditFicheViewModel


<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3 class="m-0">@CadEditFicheRES.Documents</h3>
    </div>
    <div class="page-table-meta">
        <div class="add-icon card-wrapper-link">
            <a id="btnAddDoc" href="#">
                <img src="/content/v2/images/plus-icon.svg" />
            </a>
        </div>
        &nbsp;
        <input type="button" class="text-decoration-none text-white btn btn-primary" value="Archiver" onclick="ArchiveDocument()" />
    </div>
</div>


@Html.AntiForgeryToken()

@(Html.Kendo().Grid<DocumentFicheViewModel>()
            .Name("liste-doc")
            .Columns(columns =>
            {

                columns.Bound(e => e.DocumentFicheId).Hidden();
                columns.Bound(c => c.ApplicationPreviId).Hidden();
                columns.Bound(c => c.FicheCadenassageId).Hidden();

                columns.Bound(c => c.Titre).Filterable(f => f.Extra(false).Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains(GridRES.Contains)
                    .StartsWith(GridRES.StartsWith)
                    .IsEqualTo(GridRES.Egale)
                    .IsNotEqualTo(GridRES.NotEquals)
                    ))).Hidden();


                columns.Bound(c => c.Titre)
                        .Filterable(f => f.Extra(false).Operators(operators => operators
                        .ForString(str => str.Clear()
                        .Contains(GridRES.Contains)
                        .StartsWith(GridRES.StartsWith)
                        .IsEqualTo(GridRES.Egale)
                        .IsNotEqualTo(GridRES.NotEquals)
                        )))
                        .HtmlAttributes(new { @class = "td-round-left-border" })
                        ;

                columns.Bound(c => c.FileName).EditorTemplateName("UploadEditorDoc")
                        .Encoded(false).Sortable(false).Filterable(false);

                columns.Bound(e => e.Bidon).EditorTemplateName("Vide")
                        .ClientTemplate("<a href='#=BasePath#' class='card-wrapper-link'><img src='/content/v2/images/download-icon.svg'></a>")
                        .Title("")
                        .Filterable(false).Sortable(false).Width("100px");

                columns.Command(c =>
                {
                    c.Edit().HtmlAttributes(new { @class = "btn-table btn-edit" });
                    c.Custom(" ")
                            .Click("ConfirmDeleteRowDoc")
                            .HtmlAttributes(new { @class = "k-grid-effacer btn-del" });

                })
                .Hidden(!Model.estUpdate)
                .Width("175px");
            })

            .Sortable(s => s.AllowUnsort(false))
            .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
            .Filterable()
            .DataSource(ds => ds
                .Ajax()
                .PageSize(20)
                .Model(m =>
                {
                    m.Id(e => e.DocumentFicheId);
                    m.Field(e => e.Bidon).Editable(true);
                })

            .Read(r => r.Action("ReadListDocFicheCadenassage", "DocumentsFiche", new { id = Model.FicheCadenassageId }))
            .Create(c => c.Action("SaveDocFicheCadenassage", "DocumentsFiche", new { id = Model.FicheCadenassageId }))
            .Update(u => u.Action("SaveDocFicheCadenassage", "DocumentsFiche", new { id = Model.FicheCadenassageId }))
            .Destroy(u => u.Action("DeleteDocumentFiche", "DocumentsFiche"))


            .Events(e => e.Error("docListeErreur").Sync("DocumentsSync"))
        )

        .Events(e => e.DataBound("docListeDataBound").Edit("OnDocEdit"))
        .Editable(e => e.DisplayDeleteConfirmation(false))
        .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneDocumentFicheEditor").Window(w => w.Title(CadFichesRES.Edition).Width(600).Name("editWindow")))
        .NoRecords(CadFichesRES.AucunDocument)
        .ToolBar(t =>
        {
            t.Create().HtmlAttributes(new { @class = "d-none btn-sectioncad" });
            t.Custom().Text("Archiver").Name("Archive")
                      .HtmlAttributes(new { @class = "k-grid-archive d-none" });
        })
)

<div class="">
    <br />
    <label>Commentaires</label>
    <textarea id="DocNotes" name="DocNotes" class="form-control" rows="5">@ViewBag.Comments</textarea>
    <br />
    <input type="button" class="btn btn-mettre m-1" value="Enregistrer" onclick="SaveDocNotes()" />
</div>

<script>


    $("#DocFicheCadenassage").click(function () {

        @*$("a.k-grid-add").removeClass("k-button  k-button-icontext");
        $("a.k-grid-add").addClass("btn btn-success btn-analyse");
        $("span.k-add").removeClass("k-icon");


        $("a.btn-analyse").text("@CadFichesRES.Ajouter");*@

        var estUpdate = '@Model.estUpdate';
        if (estUpdate == 'False') {
            $("a.btn-analyse").hide();
        }

        //$("a.k-grid-archive").removeClass("k-button  k-button-icontext");
        //$("a.k-grid-archive").addClass("btn");
    });


    function ConfirmDeleteRowDoc(e) {

        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.FileName, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
                DocumentsSync();
            }
        });
    }


    function docListeErreur(args) {
        var selecteurGrid = "#liste-doc";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("@CadFichesRES.Erreur",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function docListeDataBound(e)
    { }



    function docSelect(e) {
        var extension = e.files[0].extension.toLowerCase().trim();
        var size = e.files[0].size;
        var estClient = '@Model.estClient';


        if (extension != ".xlsx" && extension != ".docx" && extension != ".pdf" && extension != ".xls" && extension != ".doc") {
            e.preventDefault();

            ShowNotification("@CadFichesRES.Attention", "@CadFichesRES.AttentionType", "errorTemplate")
        }
        else {
            if (estClient == 'True' && size > 3 * 1024 * 1024) {
                e.preventDefault();

                ShowNotification("@CadFichesRES.Attention", "@CadFichesRES.TailleMaximale", "errorTemplate")
            }
        }
    }

    function docSuccess(e) {
        var z = $('.k-popup-edit-form');

        var gview = $("#liste-doc").data("kendoGrid");
        var row = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");
        var item = gview.dataItem(row);

        item.set('Titre', e.response.Titre);
        item.set('DocumentFicheId', e.response.DocumentFicheId);
        item.set('FileName', e.response.NomFichier);
        item.set('BasePath', e.response.BasePath);
    }


    function docUpload(e) {
        //   alert (this.dataItem)
        var z = $('.k-popup-edit-form');
        var gview = $("#liste-doc").data("kendoGrid");
        var item = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");
        var selectedItem = gview.dataItem(item);
        selectedItem.dirty = true;
        e.data = { DocumentFicheId: selectedItem.DocumentFicheId, FicheId:@Model.FicheCadenassageId, Titre: selectedItem.Titre };
    }

    function DocumentsSync(e) {
        if ($('#ApprouvePar') != undefined) { $('#ApprouvePar').val(''); }
        if ($('#DateApproved') != undefined) { $('#DateApproved').val(''); }

        GetUpdateInfo();
        //window.location.reload();
    }

    function SaveDocNotes() {
        var notes = $('#DocNotes').val();
        var model = {
            FicheCadenassageId: @Model.FicheCadenassageId,
            Notes: notes
        };

        $.ajax({
            url: '/DocumentsFiche/SaveDocNotesAjax',
            type: "POST",
            data: JSON.stringify(model),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                ShowNotification("@CadSourcesRES.Succes", "@CadSourcesRES.SourcesEnregistrees", "successTemplate")

                if (result == 1) {
                    DocumentsSync();
                }
            },
            error: function (data) {
                ShowNotification("@CadSourcesRES.Erreur", "@CadSourcesRES.SourcePasEnregistrees", "errorTemplate")
            }
        });
    }

    $('.k-grid-Archive').click(function (e) {
        e.preventDefault();
        ArchiveDocument();
    });

    function ArchiveDocument() {
        $.ajax({
            url: '/DocumentsFiche/CreateArchive?id=@Model.FicheCadenassageId',
            type: "POST",
            //data: JSON.stringify(model),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                ShowNotification("@Html.Raw(CadSourcesRES.Succes)", "@Html.Raw(CadSourcesRES.SourcesEnregistrees)", "successTemplate")

                if (result == 1) {
                    DocumentsSync();
                    $("#liste-doc").data("kendoGrid").dataSource.read();
                }
            },
            error: function (data) {
                ShowNotification("@Html.Raw(CadSourcesRES.Erreur)", "@Html.Raw(CadSourcesRES.SourcePasEnregistrees)", "errorTemplate")
            }
        });
    }

    //function ArchiveDoc() {
    //    $("#liste-doc").find("a.d-none.k-grid-archive").click();
    //}


    $('#btnAddDoc').click(function () {
        $("#liste-doc").find("a.d-none.k-grid-add").click();
    });


    function OnDocEdit(e) {
        console.log('changing buttons');
        jQuery('.k-grid-update').removeClass('btn-edit').addClass('btn-mettre m-1');
        jQuery('.k-grid-cancel').removeClass('btn-edit').addClass('btn-Annuler m-1');

        jQuery('.k-button.k-upload-button').addClass('btn-img m-1');
        jQuery('.k-widget.k-window').addClass('blue-header');
    }
</script>