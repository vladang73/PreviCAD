@using Previgesst.Ressources
@using Previgesst.Ressources.Cadenassage

@{
    ViewBag.Title = "Equipement Articuloe";
    //Layout = "~/Views/Shared/_Layout.cshtml";

    if (ViewData["Layout"] != null)
    {
        Layout = (string)ViewData["Layout"];
    }

    int clientId = 0;
    int.TryParse(Convert.ToString(ViewData["LeClient"]), out clientId);
}


@section styles{
    <link href="~/Content/kendo/2016.2.714/kendo.common-bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/v2/grid-override.css" rel="stylesheet" />
    <link href="~/Content/v2/buttons.css" rel="stylesheet" />
}

@section sidebar{

    <ul class="nav flex-column sidebar-nav" role="tablist">
        <li class="nav-item text-center mt-2">
            <a class="nav-link home-navlink" role="tab" data-toggle="tab" href='@Url.Action("Index", "MesApplications")'>
                <img src="/content/v2/images/icon-home.png" /><p class="nav-link-text">@LayoutRES.Accueil</p>
            </a>
        </li>

        @if (clientId > 0)
        {
            <li class="nav-item text-center">
                <a class="nav-link home-navlink" href="~/FicheCadenassage/Edit/@clientId?area=Eq">
                    <img src="/content/v2/images/equiment.svg">
                    <p class="nav-link-text">@CadEditRES.MenuEquipment</p>
                </a>
            </li>
        }
        else
        {
            <li class="nav-item text-center">
                <a class="nav-link home-navlink" href="~/FicheCadenassage/Index">
                    <img src="/content/v2/images/equiment.svg">
                    <p class="nav-link-text">@CadEditRES.FichesCadenassage</p>
                </a>
            </li>
        }

        <li class="nav nav-item text-center active">
            <a class="nav-link home-navlink" role="tab" data-toggle="tab" data-bs-toggle="tab" href="#">
                <img src="/content/v2/images/equiment.svg"><p class="nav-link-text">@CadEquipRES.EnergyManagement</p>
            </a>
        </li>
    </ul>
}



<main class="main-container-wrapper page-container">
    <div class="breadcrumbs-nav-wrapper">
        <ul class="breadcrumbs">
            <li><a href='@Url.Action("Index", "MesApplications")'>@LayoutRES.Accueil</a></li>
            @if (clientId > 0)
            {
                <li><a href="~/FicheCadenassage/Edit/@clientId?area=Eq">@CadEditRES.MenuEquipment</a></li>
            }
            else
            {
                <li><a href="~/FicheCadenassage/Index">@CadEditRES.MenuEquipment</a></li>
            }
            <li class="active">@CadEquipRES.EquipmentMgmtEnergy</li>
        </ul>
    </div>

    <div class="main-page-content">

        <div class="table-top-header">
            <div class="page-title d-flex justify-content-center align-items-center">
                <h3 class="m-0">@CadEquipRES.EquipmentMgmtEnergy</h3>
            </div>
            <div class="page-table-meta">
                <div class="add-icon">
                    <a id="btnAddEnergy" class="card-wrapper-link">
                        <img src="/content/v2/images/plus-icon.svg" />
                    </a>
                </div>
            </div>
        </div>




        @Html.AntiForgeryToken()

        @(Html.Kendo().Grid<EquipementArticuloViewModel>()
                .Name("list")
                .Columns(columns =>
                {

                    columns.Bound(e => e.EquipementId).Hidden();
                    columns.Bound(e => e.EquipementArticuloID).Hidden();

                    columns.Bound(c => c.AccessoriesDescription).Title(@CadEquipRES.Accessoires)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                        )
                    ))
                    .HtmlAttributes(new { @class = "td-round-left-border" })
                    ;

                    columns.Bound(c => c.EnergyDescription).Title(@CadEquipRES.SourceEnergie)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                                .ForString(str => str.Clear()
                                .Contains(GridRES.Contains)
                                .StartsWith(GridRES.StartsWith)
                                .IsEqualTo(GridRES.Egale)
                                .IsNotEqualTo(GridRES.NotEquals)
                    )));

                    columns.Bound(c => c.DepositDescription).Title(@CadEquipRES.Dispositif)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                                .ForString(str => str.Clear()
                                .Contains(GridRES.Contains)
                                .StartsWith(GridRES.StartsWith)
                                .IsEqualTo(GridRES.Egale)
                                .IsNotEqualTo(GridRES.NotEquals)
                    )));

                    columns.Bound(c => c.Nomenclature)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                                .ForString(str => str.Clear()
                                .Contains(GridRES.Contains)
                                .StartsWith(GridRES.StartsWith)
                                .IsEqualTo(GridRES.Egale)
                                .IsNotEqualTo(GridRES.NotEquals)
                    )));

                    columns.Command(c =>
                    {
                        c.Edit().HtmlAttributes(new { @class = "btn-table btn-edit" });
                        c.Custom(" ")
                                .Click("ConfirmDeleteRow")
                                .HtmlAttributes(new { @class = "k-grid-effacer btn-del" })
                                ;

                    })
                    .Width("230px");
                })

                .Sortable(s => s.AllowUnsort(false))
                .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                .Filterable()
                .DataSource(ds => ds
                        .Ajax()
                        .Sort(x => x.Add(c => c.AccessoriesDescription))
                        .PageSize(20)
                        .Model(m =>
                        {
                            m.Id(e => e.EquipementArticuloID);
                        })

                        .Read(r => r.Action("ReadListArticuloe", "FicheCadenassage", new { equipementId = ViewData["EqID"] }))
                        .Create(c => c.Action("SaveArticuloe", "FicheCadenassage"))
                        .Update(u => u.Action("SaveArticuloe", "FicheCadenassage"))
                        .Destroy(u => u.Action("DeleteArticuloe", "FicheCadenassage"))
                        .Events(e => e.Error("ListeErreur").RequestEnd("end"))
                        .Model(model => {
                            model.Id(m => m.EquipementArticuloID);
                            model.Field(m => m.EquipementId).DefaultValue(ViewData["EqID"]);
                        })
                )
                //.Events(e => e .DataBound("ListeDataBound"))
                .Editable(e => e.DisplayDeleteConfirmation(false))
                .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("EquipementArticuloeEditor").Window(w => w.Title(@CadEquipRES.EditTitle).Width(600).Name("editWindow").Events(e => e.Close("doRefresh"))))
                .ToolBar(t =>
                {
                    t.Create().HtmlAttributes(new { @class = "btn-instruction d-none" });
                })

        )


    </div>
</main>


<script>

    @*$("a.k-grid-add").removeClass("k-button  k-button-icontext");
    $("a.k-grid-add").addClass("btn btn-success btn-instruction");
    $("span.k-add").removeClass("k-icon");
    $("a.btn-instruction").text('@Html.Raw(CadEquipRES.NewEnergy)');*@



    function end(e) {
        // reload de la grille car pas de refresh sur application mise à jour

        if (e.type == "update") {
            var grid = $("#list").data("kendoGrid");
            grid.dataSource.read();
        }
    }

    function doRefresh(e) {
        var grid = $("#list").data("kendoGrid");
        grid.dataSource.read();
    }


    function ConfirmDeleteRow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.Identificateur, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }


    function ListeErreur(args) {

        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification(@CadEquipRES.ErrorTitle, errorList, "errorListTemplate");
                });
            });
        }
        else if (args.xhr) {
            ShowGridError("@Html.Raw(CadEquipRES.ErrorTitle)", selecteurGrid, args);
        }
    }



    function ListeDataBound(e) {
        //var selecteurGrid = "#list";
        //var grid = $(selecteurGrid).data("kendoGrid");


        ////Selects all delete buttons
        //$(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
        //    var currentDataItem = grid.dataItem($(this).closest("tr"));

        //    //Check in the current dataItem if the row is deletable
        //    if (!currentDataItem.Suppressible) {

        //        //$(this).remove();
        //        $(this).removeClass('k-grid-Effacer');
        //    }
        //})
    }

    $('#btnAddEnergy').click(function () {
        $("#list").find("a.d-none.k-grid-add").click();
    });


</script>


