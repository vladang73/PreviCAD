@model Previgesst.ViewModels.EditFicheViewModel
@using Previgesst.Ressources
@using Previgesst.Ressources.Cadenassage

<div class="panel panel-danger">

    <div class="panel-heading back-panel-light" style="font-size:larger;font-weight:500;color:white"></div>



    <div class="panel-body">


        <div style="margin-bottom:10px;">
            <input type="button" class="btn btn-success" value="@CadLigneCadRES.Renumeroter" onclick="RenumeroterLignesDEC()" />
        </div>

        <div id="Documents" class="tab-pane">

            @Html.AntiForgeryToken()

            @(Html.Kendo().Grid<LigneDecadenassageViewModel>()
                    .Name("listDEC")
                    .Columns(columns =>
                    {

                        columns.Bound(e => e.LigneDecadenassageId).Hidden();
                        columns.Bound(e => e.FicheCadenassageId).Hidden();

                        columns.Bound(c => c.NoLigne).Filterable(f => f.Extra(false)).Width("30px").Title("#");


                        columns.Bound(c => c.TexteInstruction)
                        .Filterable(f => f.Extra(false).Operators(operators => operators
                        .ForString(str => str.Clear()
                        .Contains(GridRES.Contains)
                        .StartsWith(GridRES.StartsWith)
                        .IsEqualTo(GridRES.Egale)
                        .IsNotEqualTo(GridRES.NotEquals)
                        ))).Title(CadLigneCadRES.Instruction);


                        columns.Bound(c => c.TexteSupplementaireInstruction).Title("Instruction").Width("150px")
                        .Filterable(f => f.Extra(false).Operators(operators => operators
                        .ForString(str => str.Clear()
                        .Contains(GridRES.Contains)
                        .StartsWith(GridRES.StartsWith)
                        .IsEqualTo(GridRES.Egale)
                        .IsNotEqualTo(GridRES.NotEquals)
                         ))).Title(CadLigneCadRES.AutresInstructions);

                        columns.Bound(c => c.TexteSupplementaireDispositif)
                        .Filterable(f => f.Extra(false).Operators(operators => operators
                        .ForString(str => str.Clear()
                        .Contains(GridRES.Contains)
                        .StartsWith(GridRES.StartsWith)
                        .IsEqualTo(GridRES.Egale)
                        .IsNotEqualTo(GridRES.NotEquals)
                        ))).Title(CadLigneCadRES.Dispositif).Width("120px");

                        /*         columns.Bound(c => c.TexteLocalisation)
                          .Filterable(f => f.Extra(false).Operators(operators => operators
                       .ForString(str => str.Clear()
                       .Contains("Contient")
                           .StartsWith("Commence par")
                           .IsEqualTo("Égal")
                           .IsNotEqualTo("Différent")
                          ))).Title("Localisation");*/
                        /*  columns.Bound(c => c.TexteRealiser)
                      .Filterable(f => f.Extra(false).Operators(operators => operators
                      .ForString(str => str.Clear()
                      .Contains("Contient")
                      .StartsWith("Commence par")
                      .IsEqualTo("Égal")
                      .IsNotEqualTo("Différent")
                      ))).Title("Réaliser").Width("120px");*/
                columns.Bound(e => e.Thumbnail).ClientTemplate("<img src='#=Thumbnail#'/>").EditorTemplateName("VideView").Title(CadLigneCadRES.Image).Filterable(false).Sortable(false);
                columns.Command(c =>
                {
                    c.Edit();
                    c.Custom(CadLigneCadRES.Effacer)
                    .Click("ConfirmDeleteRowCAD")
                    .HtmlAttributes(new { @class = "k-grid-effacer" });
                })
                    .Width(250);

                })
                .Sortable(s => s.AllowUnsort(false))
                .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                .Filterable()
                .DataSource(ds => ds
                    .Ajax()
                        .Sort(x => x.Add(c => c.NoLigne))

                    .PageSize(20)
                    .Model(m =>
                    {
                        m.Id(e => e.LigneDecadenassageId);
                    })

                    .Read(r => r.Action("ReadListDecadenassage", "FicheCadenassage", new { ficheId = Model.FicheCadenassageId }))
                    .Create(c => c.Action("SaveItemDecadenassage", "FicheCadenassage", new { ficheId = Model.FicheCadenassageId }))
                    .Update(u => u.Action("SaveItemDecadenassage", "FicheCadenassage", new { ficheId = Model.FicheCadenassageId }))
                    .Destroy(u => u.Action("DeleteItemDecadenassage", "FicheCadenassage"))

                    .Events(e => e.Error("ListeErreurDEC").RequestEnd("EndDC").Sync("DecadenassageSync"))
                )

                .Events(e => e
                    .DataBound("ListeDataBoundDEC").Edit("EditDEC")

                ).
                Editable(e => e.DisplayDeleteConfirmation(false)).
                Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("TemplateLigneDecadenassage").Window(w => w.Title(CadLigneCadRES.Edition).Width(600)))


                @*.ToolBar(tb =>
                    {
                    tb.Template(@<a href="/File/CreateARDoc" class="btn btn-success"><i class="fa fa-plus"></i> Ajouter un nouveau document</a>);
                    }*@

                .ToolBar(t =>
                {
                    t.Create();
                })
            )
        </div>
    </div>
</div>

<script>
    function EndDC(e) {

        if (e.type == "update" || e.type == "destroy" || e.type == "create") {

            var grid = $("#listPhoto").data("kendoGrid")
            grid.dataSource.read();

        }
    }


    $("#EtapdecFich").click(function () {

        $("a.k-grid-add").removeClass("k-button  k-button-icontext");
        $("a.k-grid-add").addClass("btn btn-success btn-sectiondeca");
        $("span.k-add").removeClass("k-icon");
        $("a.btn-sectiondeca").text("@CadLigneCadRES.Ajouter");

        
        // ADD ICONE "+"
        setTimeout(function () { $("#Decadenassage").find(".btn-success").append('<img class="addButtonImg" src="/Images/addWhite.png">'); }, 50);

    });

    var imageWindowDEC;
    var timerDEC;
    function EditDEC(e) {
        var item = $(e.container).find('[value=Image]').hide();
    }

    function changerImageDEC(e) {
        var config = {
            path: '@Url.Content("~/upload/setDECPic/")'
        };

        imageWindowDEC = PopupCenter(config.path + e, "@CadLigneCadRES.ChangerImage", 600, 300);
        timerDEC = setInterval(checkWindowDEC, 100);
    }

    function checkWindowDEC() {
        if (imageWindowDEC.closed) {
            $('#listDEC').data('kendoGrid').dataSource.read();
            $('#listDEC').data('kendoGrid').refresh();
            clearInterval(timerDEC);
        }
    }

    function PopupCenterDEC(url, title, w, h) {
        var userAgent = navigator.userAgent,
            mobile = function () {
                return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                    /\b(iP[ao]d)/.test(userAgent) ||
                    /Android/i.test(userAgent) ||
                    /Mobile/i.test(userAgent);
            },
            screenX = typeof window.screenX != 'undefined' ? window.screenX : window.screenLeft,
            screenY = typeof window.screenY != 'undefined' ? window.screenY : window.screenTop,
            outerWidth = typeof window.outerWidth != 'undefined' ? window.outerWidth : document.documentElement.clientWidth,
            outerHeight = typeof window.outerHeight != 'undefined' ? window.outerHeight : document.documentElement.clientHeight - 22,
            targetWidth = mobile() ? null : w,
            targetHeight = mobile() ? null : h,
            V = screenX < 0 ? window.screen.width + screenX : screenX,
            left = parseInt(V + (outerWidth - targetWidth) / 2, 10),
            right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
            features = [];
        if (targetWidth !== null) {
            features.push('width=' + targetWidth);
        }
        if (targetHeight !== null) {
            features.push('height=' + targetHeight);
        }
        features.push('left=' + left);
        features.push('top=' + right);
        features.push('scrollbars=0');
        features.push('location=0');
        features.push('menubar=0');
        features.push('title=0');
        features.push('resizable=0');



        var newWindow = window.open(url, title, features.join(','));

        if (window.focus) {
            newWindow.focus();
        }
        return newWindow;
    }


    function ConfirmDeleteRowDEC(e) {

        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.NoLigne, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });

    }


    function ListeErreurDEC(args) {

        var selecteurGrid = "#listDEC";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("@CadLigneCadRES.Erreur",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function ListeDataBoundDEC(e) {
        var selecteurGrid = "#listDEC";
        var grid = $(selecteurGrid).data("kendoGrid");

        //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");
        //Selects all delete buttons

        $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
            var currentDataItem = grid.dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (!currentDataItem.Suppressible) {

                $(this).remove();
            }
        })
    }


    function RenumeroterLignesDEC() {
        var dataInput = {
            FicheCadenassageId: $("#@Html.IdFor(m => m.FicheCadenassageId)").val()
        };

        $.ajax({
            url: '@Url.Action("RenumeroterLignesDEC")',
            type: "POST",
            data: JSON.stringify(dataInput),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {

                // reload de la grille
                $('#listDEC').data('kendoGrid').dataSource.read();
                $('#listDEC').data('kendoGrid').refresh();
            }
        })
    }

    function DecadenassageSync(e) {
        window.location.reload();
    }
</script>



