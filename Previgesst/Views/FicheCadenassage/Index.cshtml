@using Previgesst.Ressources
@model AffichageListesViewModel


@{
    ViewBag.Title = "Cadenassage";
    Layout = "~/Views/Shared/_Layout_v2.cshtml";
}

@section styles{
    <link href="~/Content/kendo/2016.2.714/kendo.common-bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.min.css" rel="stylesheet" />
    <link href="~/Content/kendo/2016.2.714/kendo.dataviz.bootstrap.min.css" rel="stylesheet" />

    <link href="~/Content/v2/grid-override.css" rel="stylesheet" />
    <link href="~/Content/v2/buttons.css" rel="stylesheet" />
}

@section sidebar{
    <ul class="nav flex-column sidebar-nav" role="tablist">
        <li class="nav-item text-center mt-2">
            <a class="nav-link home-navlink" role="tab" href="~/@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName/AdminPrevi/Index">
                <img src="/content/v2/images/icon-home.png" /><p class="nav-link-text">@LayoutRES.Accueil</p>
            </a>
        </li>

        <li class="nav-item text-center">
            <a class="nav-link home-navlink" href="#Clients" aria-controls="general" role="tab" data-toggle="tab" data-bs-toggle="tab">
                <img src="/content/v2/images/Clients.svg" title="Clients" />
                <p class="nav-link-text">Clients</p>
            </a>
        </li>
        @if (Model.AfficherListes)
        {
            <li class="nav-item text-center">
                <a class="nav-link home-navlink" href="#Listes" aria-controls="pratiques" role="tab" data-toggle="tab" data-bs-toggle="tab">
                    <img src="/content/v2/images/detail-icon.svg" title="Listes" />
                    <p class="nav-link-text">Listes</p>
                </a>
            </li>
        }
    </ul>
}


<main class="main-container-wrapper page-container">

    <div class="breadcrumbs-nav-wrapper">
        <ul class="breadcrumbs">
            <li><a href="~/AdminPrevi/Index">@LayoutRES.Accueil</a></li>
            <li>Cadenassage</li>
        </ul>
    </div>


    <div class="main-page-content">

        <div class="table-top-header">
            <div class="page-title d-flex justify-content-center align-items-center">
                <h3>Gestion des fiches de cadenassage</h3>
            </div>
        </div>


        <div class="tab-content">

            <div id="Clients" class="tab-pane active">

                @Html.AntiForgeryToken()

                @(Html.Kendo().Grid<ClientListViewModel>()
                    .Name("list")
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.Nom)
                               .Filterable(f => f.Extra(false).Operators(operators => operators
                               .ForString(str => str.Clear()
                               .Contains("Contient")
                               .StartsWith("Commence par")
                               .IsEqualTo("Égal")
                               .IsNotEqualTo("Différent")
                        )));

                        columns.Bound(c => c.Identificateur)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains("Contient")
                            .StartsWith("Commence par")
                            .IsEqualTo("Égal")
                            .IsNotEqualTo("Différent")
                        )));

                        columns.Bound(e => e.ClientId)
                               .ClientTemplate("<a target='_blank'  href='../FicheCadenassage/Edit/#= " + nameof(ClientListViewModel.ClientId) + " #' class='btn btn-primary' style='float:left'>Gérer le cadenassage</a>")
                               .Title("").Filterable(false).Sortable(false).Width("250px");
                    })
                    .Sortable(s => s.AllowUnsort(false))
                    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                    .Filterable()
                    .DataSource(ds => ds
                        .Ajax()

                        .PageSize(20)
                        .Model(m =>
                        {
                            m.Id(e => e.ClientId);
                        })
                        .Read(r => r.Action("ReadListClientsActifs", "Client"))

                        //  .Create(c => c.Action("Save", "Listes"))
                        .Events(e => e.Error("ListeErreur"))
                    )
                    .Events(e => e
                        .DataBound("ListeDataBound")
                        .Change("changeKendo")
                        .ColumnHide("columnHideKendo")
                        .ColumnShow("columnShowKendo")
                        .ColumnReorder("columnReorderKendo")

                    )
        )


            </div>

            @*

                <div id="Documents" class="tab-pane">

                    @Html.AntiForgeryToken()

                    @(Html.Kendo().Grid<DocumentViewModel>()
                                    .Name("liste-doc")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(e => e.DocumentId).Hidden();

                                        columns.Bound(c => c.Titre)
                                                .Filterable(f => f.Extra(false).Operators(operators => operators
                                                .ForString(str => str.Clear()
                                                .Contains("Contient")
                                                .StartsWith("Commence par")
                                                .IsEqualTo("Égal")
                                                .IsNotEqualTo("Différent")
                                        )));



                                        columns.Bound(c => c.Ordre)
                                        .Filterable(false);

                                        columns.Bound(c => c.FileName).EditorTemplateName("UploadEditor").Encoded(false).Sortable(false).Filterable(false);

                                        columns.Bound(e => e.Bidon).EditorTemplateName("Vide").ClientTemplate("<a href='../File/DownloadFile?ID=#= " + nameof(DocumentViewModel.DocumentId) + " #' class='btn btn-info' style='float:right'>Télécharger le document</a>").Title("").Filterable(false).Sortable(false).Width(200);


                                        columns.Bound(c => c.DisplaySection).Hidden()
                                                    .Filterable(f => f.Extra(false).Operators(operators => operators
                                                    .ForString(str => str.Clear()
                                                    .Contains("Contient")
                                                        .StartsWith("Commence par")
                                                        .IsEqualTo("Égal")
                                                        .IsNotEqualTo("Différent")
                                                    )));




                                        columns.Command(c =>
                                        {
                                            c.Edit();
                                            c.Custom("Effacer")
                                            .Click("ConfirmDeleteRow")
                                            .HtmlAttributes(new { @class = "k-grid-effacer" });

                                        })
                                        .Width(250);

                                    })

                                    .Sortable(s => s.AllowUnsort(false))
                                    .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                                    .Filterable()
                                    .DataSource(ds => ds
                                        .Ajax()
                                        .Group(g => g.Add(c => c.DisplaySection))
                                        .Sort(x => x.Add(c => c.Ordre))
                                        .PageSize(20)
                                        .Model(m =>
                                        {
                                            m.Id(e => e.DocumentId);
                                            m.Field(e => e.Bidon).Editable(true);
                                        })

                                    .Read(r => r.Action("ReadListCadenassage", "Documents"))
                                    .Create(c => c.Action("SaveAR", "Documents"))
                                    .Update(u => u.Action("SaveAR", "Documents"))
                                    .Destroy(u => u.Action("DeleteDOC", "Documents"))

                                    .Events(e => e.Error("docListeErreur"))
                                )

                                .Events(e => e
                                    .DataBound("docListeDataBound")
                                ).Editable(e => e.DisplayDeleteConfirmation(false))
                                .ToolBar(t =>
                                {
                                    t.Create();
                                }).Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("LigneDocumentEditor").Window(w => w.Title("Édition d'un document").Width(600).Name("editWindow")))
                        )


                </div>

            *@

            <div id="Listes" class="tab-pane">
                <div class="p-5">

                    <div class="row"><div class="col-md-4 col-sm-12"><a href="~/Listes/Materiel" target="_blank" class="btn btn-primary d-block">Matériels</a><br /></div></div>
                    <div class="row"><div class="col-md-4 col-sm-12"><a href="~/Listes/SourcesEnergie" target="_blank" class="btn btn-primary d-block">Sources d'énergie</a><br /></div></div>
                    <div class="row"><div class="col-md-4 col-sm-12"><a href="~/Listes/Dispositifs" target="_blank" class="btn btn-primary d-block">Dispositifs</a><br /></div></div>
                    <div class="row"><div class="col-md-4 col-sm-12"><a href="~/Listes/Accessoires" target="_blank" class="btn btn-primary d-block">Accessoires</a><br /></div></div>
                    <div class="row"><div class="col-md-4 col-sm-12"><a href="~/Instruction/Index" target="_blank" class="btn btn-primary d-block">Instructions</a><br /></div></div>

                </div>

            </div>

        </div>


    </div>

</main>




<script type="text/javascript">

    //function doCancel() {

    //    alert("cancel");
    //    $("a.k-grid-edit").removeClass("k-button  k-button-icontext");
    //    $("a.k-grid-edit").addClass("btn btn-primary");
    //    $("span.k-edit").removeClass("k-icon");
    //}

    $("#DocCad").click(function () {

        $("a.k-grid-add").removeClass("k-button  k-button-icontext");
        $("a.k-grid-add").addClass("btn btn-success btn-GesCad");
        $("span.k-add").removeClass("k-icon");
        $("a.btn-GesCad").text("Ajouter");

        //var link = $("p.k-reset").find('a');
        //$("p.k-reset:contains('DisplaySection')").text('Section').css("color", "black").before(link);
    });




    var collapseAllGroups = function (grid) {

        var trouve = false;

        grid.table.find(".k-grouping-row").each(function () {
            if (trouve == true)
                grid.collapseGroup(this);
            trouve = true;
        });

    }


    function ConfirmDeleteRow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.FileName, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }


    function docListeErreur(args) {
        //debugger;
        var selecteurGrid = "#liste-doc";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("Erreur - Gestions",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function docListeDataBound(e) { }

    function ListeErreur(args) {
        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    ShowNotification("Erreur - Gestions",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
        else if (args.xhr) {
            ShowGridError("Erreur - Gestions", selecteurGrid, args);
        }
    }

    function ListeDataBound(e) {
        var selecteurGrid = "#list";
        var grid = $(selecteurGrid).data("kendoGrid");

        ////Selects all delete buttons
        //$(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
        //    var currentDataItem = grid.dataItem($(this).closest("tr"));

        //    //Check in the current dataItem if the row is deletable
        //    if (!currentDataItem.Suppressible) {

        //        $(this).remove();
        //    }
        //})


        collapseAllGroups(grid);
        //  dataBoundKendo(e);
    }


    var uniqueName = '@ViewContext.RouteData.Values["controller"]' + '@ViewContext.RouteData.Values["action"]' + '1_';
    var colState = uniqueName + "columnState";
    var gridState = uniqueName + "gridState";
    var gridRows = uniqueName + "gridRows";


    $(function () {
        var grid = $("#list").data("kendoGrid");
        var state = false;
        state = JSON.parse($.cookie(gridState) || null);

        var currentColumnState = JSON.parse($.cookie(colState) || null);

        if (currentColumnState && currentColumnState.length > 0) {
            for (var i = 0; i < currentColumnState.length; i++) {
                grid.hideColumn(currentColumnState[i]);
            }
        }

        if (state) {
            if (state.filter) {
                parseFilterDates(state.filter, grid.dataSource.options.schema.model.fields);
            }
            grid.dataSource.query(state);
        } else {
            grid.dataSource.read();
        }

        //Bind the grid to dataBound so that changes the user make are sent to the save routine
        grid.bind("dataBinding", dataBoundKendo);
    });


    function parseFilterDates(filter, fields) {
        if (filter.filters) {
            for (var i = 0; i < filter.filters.length; i++) {
                parseFilterDates(filter.filters[i], fields);
            }
        } else {
            if (fields[filter.field].type == "date") {
                filter.value = kendo.parseDate(filter.value);
            }
        }

    }


            //When the grid is databound, or changes made, persist them
    function dataBoundKendo(e) {
        var grid = this;
        var dataSource = this.dataSource;

        var state = kendo.stringify({
            page: dataSource._page,
            pageSize: dataSource._pageSize,
            sort: dataSource.sort(),
            group: dataSource.group(),
            filter: dataSource.filter()
        });


        var currentColumnState = [];
        for (var i = 0; i < grid.columns.length; i++) {
            if (grid.columns[i].hidden) {
                currentColumnState.push(grid.columns[i].field);
            }
        }
        $.cookie(colState, JSON.stringify(currentColumnState));

        $.cookie(gridState, state);

        if ($.cookie(gridRows)) {
            $.each(JSON.parse($.cookie(gridRows)), function () {
                var item = dataSource.get(this);
                var row = grid.tbody.find('[data-uid=' + item.uid + ']');
                row.addClass('k-state-selected');
            });
        }
    }

    function columnHideKendo(e) {
        setTimeout(function () {
            e.sender.trigger("dataBoundKendo");
        });

    }

    function columnShowKendo(e) {
        setTimeout(function () {
            e.sender.trigger("dataBoundKendo");
        });
    }

    function columnReorderKendo(e) {
        setTimeout(function () {
            e.sender.trigger("dataBoundKendo");
        });
    }

    function changeKendo() {
        var grid = this;
        var ids = grid.select().map(function () {
            return grid.dataItem($(this)).Id;
        }).toArray();
        $.cookie(gridRows, JSON.stringify(ids));
    }


    function fileSelect(e) {
        var extension = e.files[0].extension.toLowerCase().trim();

        if (extension != ".xlsx" && extension != ".docx" && extension != ".pdf" && extension != ".xls" && extension != ".doc") {
            e.preventDefault();

            ShowNotification("Attention!", "Seuls les fichiers Excel, Word et PDF sont acceptés.", "errorTemplate")
        }
    }

    function fileSuccess(e) {
        var z = $('.k-popup-edit-form');
        var gview = $("#liste-doc").data("kendoGrid");
        var row = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");
        var item = gview.dataItem(row);

        item.set('Titre', e.response.Titre);
        item.set('SectionId', e.response.Section);
        item.set('DocumentId', e.response.DocumentId);
        item.set('Ordre', e.response.Ordre);
        item.set('FileName', e.response.NomFichier);
    }


    function fileUpload(e) {
        var z = $('.k-popup-edit-form');
        var gview = $("#liste-doc").data("kendoGrid");
        var item = $("#liste-doc").find("[data-uid='" + z.attr('data-uid') + "']");

        var selectedItem = gview.dataItem(item);
        selectedItem.dirty = true;
        e.data = { DocumentId: selectedItem.DocumentId, Titre: selectedItem.Titre, Section: selectedItem.SectionId, Ordre: selectedItem.Ordre, SectionTexte: selectedItem.SectionTexte };
    }

</script>


