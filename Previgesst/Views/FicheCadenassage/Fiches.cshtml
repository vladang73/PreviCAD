@using Previgesst.Ressources.Cadenassage
@using Previgesst.Ressources
@model Previgesst.ViewModels.EditCadenassageViewModel

<div class="table-top-header">
    <div class="page-title d-flex justify-content-center align-items-center">
        <h3 class="m-0">@CadEditRES.TitreSectionCadenassage</h3>
    </div>
    <div class="page-table-meta">
        <div class="add-icon">
            <a href="~/@System.Threading.Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName/FicheCadenassage/CreerFiche/@Model.ClientId">
                <img src="/content/v2/images/plus-icon.svg" />
            </a>
        </div>
        <div class="search-qr-code">
            <a class="text-decoration-none text-white" data-toggle="modal" data-target="#qrModal" id="btnScanQR" data-bs-toggle="modal" data-bs-target="#qrModal">
                <img src="/content/v2/images/scanner.svg">
                <span>@CadFichesRES.ScanQR</span>
            </a>
        </div>
        <div class="table-search">
            <div class="table-search-field">
                <img class='table-search-icon' src="/content/v2/images/search.svg">
                <input type="text" name="search" value="" class="search" placeholder="@CadEditRES.SearchPlaceholder">
            </div>
            <div class="search-note">
                <img src="/content/v2/images/reset.svg"><span class="search-note-text">@CadEditRES.SearchReset</span>
            </div>
        </div>
    </div>
</div>




@Html.AntiForgeryToken()

@(Html.Kendo().Grid<LigneCadenassageGridViewModel>()
                    .Name("list")
                    .Columns(columns =>
                    {

                        columns.Bound(e => e.EquipementId).Hidden();
                        columns.Bound(e => e.FicheCadenassageId).Hidden();

                        columns.Bound(e => e.IsApproved).Title(CadFichesRES.Statut)
                            .ClientTemplate("<center><div class='squaredThree'><input type='checkbox' " + Model.RCDisabled + " value='None' id='squaredone' name='check' #=IsApproved ? checked='checked' :'' # /><label for='squaredone'><span> </span></label></div></center>")
                            .HtmlAttributes(new { @class = "td-round-left-border" })
                            .Width("50px");

                        columns.Bound(c => c.NoFiche).Title(CadFichesRES.NoFiche)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                        )))
                        .Width("80px");

                        columns.Bound(e => e.TitreFiche).Title(CadFichesRES.Type).ClientTemplate("").Width("80px");

                        columns.Bound(e => e.NumeroEquipment).Title(CadFichesRES.Num)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                        )))
                        .Width("120px");

                        columns.Bound(e => e.NomEquipement).Title(CadFichesRES.Equipement)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                        )))
                        .Width("170px");

                        columns.Bound(e => e.Departement).Title(CadFichesRES.Departement)
                            .Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains(GridRES.Contains)
                            .StartsWith(GridRES.StartsWith)
                            .IsEqualTo(GridRES.Egale)
                            .IsNotEqualTo(GridRES.NotEquals)
                        )))
                        .Width("115px");

                        columns.Bound(e => e.TravailAEffectuer).Title(CadFichesRES.AEffectuer).ClientTemplate("").Width("300px");

                        columns.Bound(e => e.FicheCadenassageId).ClientTemplate("<a href='../../FicheCadenassage/GetFiche/#= " + nameof(LigneCadenassageGridViewModel.FicheCadenassageId) + "#'  title='" + CadFichesRES.Telecharger +"'><img src='/content/v2/images/fr-icon.svg' alt='FR icon'/></a>").Title("").Filterable(false).Sortable(false).Width("30px");
                        columns.Bound(e => e.FicheCadenassageId).ClientTemplate("<a href='../../FicheCadenassage/GetFicheEN/#= " + nameof(LigneCadenassageGridViewModel.FicheCadenassageId) + "#' title='"+ CadFichesRES.Telecharger + "'><img src='/content/v2/images/en-icon.svg' alt='FR icon'/></a>").Title("").Filterable(false).Sortable(false).Width("30px");

                        if (User.IsInRole("Administrateur")) { 
                            columns.Bound(e => e.estDocumentPrevigesst)
                            //.ClientTemplate("<center><input disabled type='checkbox' #=estDocumentPrevigesst ? checked='checked' :'' # /></center>")
                            .ClientTemplate("<center><div class='squaredThree'><input type='checkbox' value='None' id='squaredone' name='check' #=estDocumentPrevigesst ? checked='checked' :'' # /><label for='squaredone'><span> </span></label></div></center>")
                            .Title("Prévi").Width("65px"); 
                        }

                        columns.Bound(bt => bt.FicheCadenassageId).ClientTemplate("<a href='../../FicheCadenassage/EditFiche/#= " + nameof(LigneCadenassageGridViewModel.FicheCadenassageId) + " #' class='btn-table btn-edit'> " + Html.Raw(CadFichesRES.Modifier) + "</a>").Title("").Filterable(false).Sortable(false).Hidden(!Model.estUpdate).Width("125px");
                        columns.Bound(bt => bt.FicheCadenassageId).ClientTemplate("<a href='../../FicheCadenassage/DuplicateFiche/#= " + nameof(LigneCadenassageGridViewModel.FicheCadenassageId) + " #' class='btn-table btn-duplicate'><img src='/content/v2/images/dup-icon.svg' alt='dup icon'/> " + Html.Raw(CadFichesRES.Dupliquer) + "</a>").Title("").Filterable(false).Sortable(false).Hidden(!Model.estUpdate).Width("130px");

                        columns.Command(c =>
                        {
                            c.Custom(CadFichesRES.Vide)
                            .Click("ConfirmDeleteRowFiche")
                            .HtmlAttributes(new { @class = "k-grid-effacer12 btn btn-del" });
                        }).Title(CadFichesRES.Vide).Hidden(!Model.estUpdate).Width("50px");
                    })

                    .Sortable(s => s.AllowUnsort(false))
                    .Pageable(s => s.PageSizes(true).PageSizes(new List<int>{ 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                    .Filterable()
                    .HtmlAttributes(new { @class = "fix-grid-height-na" })
                    .DataSource(ds => ds
                        .Ajax()
                        .Filter(f =>
                        {
                            if ( !Model.estUpdate)
                            {
                                f.Add(b => b.IsApproved).IsEqualTo(true);
                            }
                        })
                        .PageSize(20)
                        .Model(m =>
                        {
                            m.Id(e => e.FicheCadenassageId);
                            m.Field(e => e.Suppressible).DefaultValue(false);
                        })
                        .Read(r => r.Action("ReadListFiches", "FicheCadenassage", new { client = Model.ClientId }))
                        //.Create(c => c.Action("SaveFiche", "FicheCadenassage", new { client = Model.ClientId }))
                        //.Update(u => u.Action("SaveFiche", "FicheCadenassage", new { client = Model.ClientId }))
                        .Destroy(u => u.Action("DeleteFiche", "FicheCadenassage"))
                        .Events(e => e.Error("ListeErreurFiche"))
                    )
                    .Events(e => e.DataBound("ListeDataBoundFiche")
                    )
                    .Editable(e => e.DisplayDeleteConfirmation(false))
                )

<script>
   
    function doCheck(ficheCadenassage, e) {
        //call ajax pour activer/désactiver la fiche
        var dataInput = {
            ficheId: ficheCadenassage,
            etat: e.checked
        };

        $.ajax({
            data: JSON.stringify(dataInput),
            url: '@Url.Action("ActiverDesactiver")',
            type: "POST",

            contentType: "application/json; charset=utf-8",
            success: function (result) {
            },
            error: function (data) {
            }
        })
    }

    @*$("#Fich").click(function () {

        $("a.k-grid-add").removeClass("k-button  k-button-icontext");
        $("a.k-grid-add").addClass("btn btn-success btn-test");
        $("span.k-add").removeClass("k-icon");

        $("a.btn-test").text("@CadFichesRES.Ajouter");
    });*@




    function ConfirmDeleteRowFiche(e) {
        //debugger;
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        var dataItem = this.dataItem(row);

        ShowDeleteConfirm(dataItem.NoFiche, function (args) {
            if (args.confirmed === true) {
                grid.removeRow(row);
            }
        });
    }


    function ListeErreurFiche(args) {
        //debugger;
        var selecteurGrid = "#list";
        if (args.errors) {
            var grid = $(selecteurGrid).data("kendoGrid");
            var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
            grid.one("dataBinding", function (e) {
                e.preventDefault();

                $.each(args.errors, function (propertyName) {
                    var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                    alert(this.errors);
                    ShowNotification("Erreur - Gestions",
                        errorList,
                        "errorListTemplate");
                });
            });
        }
    }

    function ListeDataBoundFiche(e) {
        var selecteurGrid = "#list";
        var grid = $(selecteurGrid).data("kendoGrid");

        //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");


        //Selects all delete buttons
        $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
            var currentDataItem = grid.dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (!currentDataItem.Suppressible) {

                    $(this).remove();
            }
        })

        //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");



        //Selects all delete buttons
        $("#list tbody tr .k-cde-edit").each(function () {
            var currentDataItem = grid.dataItem($(this).closest("tr"));

            //Check in the current dataItem if the row is deletable
            if (!currentDataItem.Suppressible) {

                $(this).remove();
            }
        })
    }

        // FICHE/PROCÉDURE : Check and replace the string by an image
        setTimeout(function () {
            jQuery('.fichesCadenassage #list table tbody tr td:nth-child(4)').each(function () {
                if (jQuery(this).text() == 'Procédure de travail sécuritaire') {
                    jQuery(this).html("<img src='/Images/procedure.png' style='width: 40px;' title='Procédure de travail sécuritaire'>");
                }
                else if(jQuery(this).text() == 'Safe work procedure'){
                    jQuery(this).html("<img src='/Images/procedure.png' style='width: 40px;' title='Safe work procedure'>");
                }
                else if(jQuery(this).text() == 'Fiche de cadenassage'){
                    jQuery(this).html("<img src='/Images/Unknown.png' style='width: 40px;' title='Fiche de cadenassage'>");
                }
                else if(jQuery(this).text() == 'Lockout procedure'){
                    jQuery(this).html("<img src='/Images/Unknown.png' style='width: 40px;' title='Lockout procedure'>");
                }
            });
        }, 3000);


    // Replace "true" and "false" strings
    jQuery(".k-filterable[data-field='IsApproved'] .k-grid-filter").click(function () {
        if (jQuery('.k-filter-help-text').length == 0) {
            setTimeout(function () {


                // Replace bad title strings
                jQuery('.k-filter-help-text').each(function () {
                    var titleValue = jQuery(this);
                    if (titleValue.text() == "Afficher les lignes avec la valeur qui") {
                        var newTitleTitle = titleValue.text().replace("Afficher les lignes avec la valeur qui", "");
                        jQuery(this).text(newTitleTitle);
                    } else if (titleValue.text() == "Show items with value that:") {
                        var newTitleTitle = titleValue.text().replace("Show items with value that:", "");
                        jQuery(this).text(newTitleTitle);
                    } else {
                    console.log('error');
                    }
                });

                // Replace bad label button
                jQuery('.k-button').each(function () {
                    var valueButton = jQuery(this);
                    if (valueButton.text() == 'Effacer filtre') {
                        var newValueButton = valueButton.text().replace('Effacer filtre', 'Effacer');
                        jQuery(this).text(newValueButton);
                    }
                });


                // Replace bad label strings
                jQuery('label').each(function () {
                    var myLabel = jQuery(this).text();

                    if (myLabel == "est vraie") {
                        var newLabel = jQuery(this).text().replace("est vraie", "Approuvée");
                        jQuery(this).text(newLabel);
                        jQuery(this).prepend("<input type='radio' data-bind='checked: filters[0].value' value='true' name='filters[0].value' style='margin-left: 5px;'>");
                    } else if (myLabel == "est fausse") {
                        var newLabel = jQuery(this).text().replace("est fausse", "Non Approuvée");
                        jQuery(this).text(newLabel);
                        jQuery(this).prepend("<input type='radio' data-bind='checked: filters[0].value' value='false' name='filters[0].value' style='margin-left: 5px;'>");
                    } else if (myLabel == "is true") {
                        var newLabel = jQuery(this).text().replace("is true", "Non Approuvée");
                        jQuery(this).text(newLabel);
                        jQuery(this).prepend("<input type='radio' data-bind='checked: filters[0].value' value='true' name='filters[0].value' style='margin-left: 5px;'>");
                    } else {
                        var newLabel = jQuery(this).text().replace("is false", "No Aprovado");
                        jQuery(this).text(newLabel);
                        jQuery(this).prepend("<input type='radio' data-bind='checked: filters[0].value' value='false' name='filters[0].value' style='margin-left: 5px;'>");
                    }
                });

                jQuery('.k-filter-help-text').parent().find('.k-button:nth-child(2)').addClass('emptyFilter');
                jQuery('.emptyFilter').click();
            },300);
        }
    });
</script>



<div class="modal" tabindex="-1" role="dialog" id="qrModal" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg1" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" style="display: inline-block;">@CadFichesRES.ScanQREquip</h5>
                <button type="button" class="close" data-dismiss="modal" data-bs-dismiss="modal" aria-label="Close" id="btnCloseQRPopup">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="qr-reader" style="width:300px"></div>
                <div id="qr-reader-results"></div>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/html5-qrcode.min.js"></script>

<script type="text/javascript">
    var resultContainer = document.getElementById('qr-reader-results');
    var lastResult, countResults = 0;

    function onScanSuccess(decodedText, decodedResult) {
        //if (decodedText !== lastResult)
        {
            ++countResults;
            lastResult = decodedText;
            // Handle on success condition with the decoded message.
            console.log('Scan result ' + decodedText, decodedResult);



            $('#qrModal').modal('hide');
            var qrEqID = decodedText.split('#')[1];

            var qrFilter = new Array();
            qrFilter.push({ field: "EquipementId", operator: "eq", value: qrEqID });


            var grid = $("#list").data("kendoGrid");
            grid.dataSource.filter(qrFilter);
            grid.dataSource.read();

            //alert('filtered ' + decodedText);
        }
    }

    $('#btnScanQR').click(function () {
        //var html5QrcodeScanner = new Html5QrcodeScanner("qr-reader", { fps: 10, qrbox: 250 });
        //html5QrcodeScanner.render(onScanSuccess);
        //$('#qr-reader').removeAttr('style');

        const html5QrCode = new Html5Qrcode("qr-reader");
        const qrCodeSuccessCallback = (decodedText, decodedResult) => {
            /* handle success */
            onScanSuccess(decodedText, decodedResult);

            console.log('stoping scan');
            html5QrCode.stop();
        };
        const config = { fps: 10, qrbox: 200 };
        // If you want to prefer back camera
        html5QrCode.start({ facingMode: "environment" }, config, qrCodeSuccessCallback);

        $('#btnCloseQRPopup').off('click').click(function () { html5QrCode.stop(); });
    });

    $('#btnClearQRFilter').click(function () {
        var qrFilter = new Array();
        var grid = $("#list").data("kendoGrid");
        grid.dataSource.filter(qrFilter);
        grid.dataSource.read();
    });
</script>
