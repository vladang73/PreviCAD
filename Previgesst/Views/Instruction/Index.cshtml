
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container">

    <div class="row">

        <div class="col-md-12">

            <hr />

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">


                    <li class="breadcrumb-item active" aria-current="page">Gestion des instructions</li>
                </ol>
            </nav>


            <div class="panel panel-danger">

                <div class="panel-heading" style="font-size:larger;font-weight:500;background-color:#0c5c82;color:white">Instructions</div>
                <div class="panel-body">

                    <div id="Documents" class="tab-pane">

                        @Html.AntiForgeryToken()

                        @(Html.Kendo().Grid<InstructionViewModel>()
                                .Name("list")
                                .Columns(columns =>
                                {

                                    columns.Bound(e => e.InstructionId).Hidden();

                                    columns.Bound(c => c.Identificateur).Filterable(f => f.Extra(false).Operators(operators => operators
                            .ForString(str => str.Clear()
                            .Contains("Contient")
                            .StartsWith("Commence par")
                            .IsEqualTo("Égal")
                            .IsNotEqualTo("Différent")
                            )));

                                    columns.Bound(c => c.IdentificateurEN).Filterable(f => f.Extra(false).Operators(operators => operators
.ForString(str => str.Clear()
.Contains("Contient")
.StartsWith("Commence par")
.IsEqualTo("Égal")
.IsNotEqualTo("Différent")
)));

                                    columns.Bound(c => c.Accessoire)
                                         .Filterable(f => f.Extra(false).Operators(operators => operators
                                      .ForString(str => str.Clear()
                                      .Contains("Contient")
                                          .StartsWith("Commence par")
                                          .IsEqualTo("Égal")
                                          .IsNotEqualTo("Différent")
                                         )));


                                    columns.Bound(c => c.Dispositif)
                                         .Filterable(f => f.Extra(false).Operators(operators => operators
                                      .ForString(str => str.Clear()
                                      .Contains("Contient")
                                          .StartsWith("Commence par")
                                          .IsEqualTo("Égal")
                                          .IsNotEqualTo("Différent")
                                         )));


                                    columns.Bound(c => c.TexteInstruction)
                                 .Filterable(f => f.Extra(false).Operators(operators => operators
                              .ForString(str => str.Clear()
                              .Contains("Contient")
                                  .StartsWith("Commence par")
                                  .IsEqualTo("Égal")
                                  .IsNotEqualTo("Différent")
                                 )));

                                    columns.Bound(c => c.TexteInstructionEN)
                                 .Filterable(f => f.Extra(false).Operators(operators => operators
                              .ForString(str => str.Clear()
                              .Contains("Contient")
                                  .StartsWith("Commence par")
                                  .IsEqualTo("Égal")
                                  .IsNotEqualTo("Différent")
                                 )));


                                    columns.Command(c =>
                                    {
                                        c.Edit();
                                        c.Custom("Effacer")
                                              .Click("ConfirmDeleteRow")
                                              .HtmlAttributes(new { @class = "k-grid-effacer" });

                                    })
                                       .Width(250);

                                })

                                .Sortable(s => s.AllowUnsort(false))
                                .Pageable(s => s.PageSizes(true).PageSizes(new List<int> { 5, 10, 20, 50 }).Input(true).Info(false).Numeric(false))
                                .Filterable()
                                .DataSource(ds => ds
                                    .Ajax()
                                       //.Sort( x=> x.Add (c => c.DisplaySection))
                                       .Sort(x => x.Add(c => c.Identificateur))

                                    .PageSize(20)
                                    .Model(m =>
                                    {
                                        m.Id(e => e.InstructionId);



                                    })

                                .Read(r => r.Action("ReadListInstructions", "Instruction"))
                                .Create(c => c.Action("SaveInstruction", "Instruction"))
                                .Update(u => u.Action("SaveInstruction", "Instruction"))
                                .Destroy(u => u.Action("DeleteInstruction", "Instruction"))


                                .Events(e => e
                                    .Error("ListeErreur").RequestEnd("end")
                                )
                                )

                                .Events(e => e
                                    .DataBound("ListeDataBound")

                                ).Editable(e => e.DisplayDeleteConfirmation(false)).
                                Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("InstructionEditor").Window(w => w.Title("Édition d'une instruction").Width(600).Name("editWindow").Events(e => e.Close("doRefresh"))))


                                                @*.ToolBar(tb =>
                                                    {
                                                    tb.Template(@<a href="/File/CreateARDoc" class="btn btn-success"><i class="fa fa-plus"></i> Ajouter un nouveau document</a>);
                                                    }*@

                                .ToolBar(t =>
                                {
                                    t.Create();
                                    t.Excel();
                                })
                                .Excel(excel => excel.FileName("Instructions.xlsx").AllPages(true))
                        )


                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
            <script>


                    $("a.k-grid-add").removeClass("k-button  k-button-icontext");
                    $("a.k-grid-add").addClass("btn btn-success btn-instruction");
                    $("span.k-add").removeClass("k-icon");
                $("a.btn-instruction").text("Nouvelle instruction");

             




                function end(e) {
                    // reload de la grille car pas de refresh sur application mise à jour
                   
                   if (e.type == "update" ) {
                        var grid = $("#list").data("kendoGrid");
                        grid.dataSource.read();

                    }

                }
                function doRefresh(e) {
                    var grid = $("#list").data("kendoGrid");
                    grid.dataSource.read();
                }
               

                function ConfirmDeleteRow(e) {

                    e.preventDefault();

                    var grid = this;
                    var row = $(e.currentTarget).closest("tr");
                    var dataItem = this.dataItem(row);

                    ShowDeleteConfirm(dataItem.Identificateur, function (args) {
                        if (args.confirmed === true) {
                            grid.removeRow(row);
                        }
                    });

                }


                function ListeErreur(args) {

                    var selecteurGrid = "#list";
                    if (args.errors) {
                        var grid = $(selecteurGrid).data("kendoGrid");
                        var validationTemplate = kendo.template($("#gridValidationMessageTemplate").html());
                        grid.one("dataBinding", function (e) {
                            e.preventDefault();

                            $.each(args.errors, function (propertyName) {
                                var errorList = validationTemplate({ field: propertyName, messages: this.errors });
                                alert(this.errors);
                                ShowNotification("Erreur - Gestions",
                                    errorList,
                                    "errorListTemplate");
                            });
                        });
                    }



                }

              

                function ListeDataBound(e) {



                    var selecteurGrid = "#list";
                    var grid = $(selecteurGrid).data("kendoGrid");


                    //$(selecteurGrid + " .k-grid-effacer").find("span").addClass("k-icon k-delete");

                   

                    //Selects all delete buttons
                    $(selecteurGrid + " tbody tr .k-grid-effacer").each(function () {
                        var currentDataItem = grid.dataItem($(this).closest("tr"));
                 
                        //Check in the current dataItem if the row is deletable
                        if (!currentDataItem.Suppressible) {

                            $(this).remove();
                        }
                    })
                   
                }

            </script>


